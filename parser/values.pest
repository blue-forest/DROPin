/*     _              _ _
 *  __| |_ _ ___ _ __( |_)_ _
 * / _` | '_/ _ \ '_ \/| | ' \
 * \__,_|_| \___/ .__/ |_|_||_| dropin-compiler - WebAssembly
 *              |_|
 * Copyright Â© 2019-2022 Blue Forest
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

value           =  { (s ~ value_inline) | (i ~ value_newline ~ DROP) }
value_inline    = _{ setter | getter | binary | quantity | boolean | text }
value_newline   = _{ list | object }
list            =  { list_item ~ (n ~ list_item)* }
list_item       =  { value_inline | ("\\" ~ i ~ value_newline ~ DROP) }
object          =  { key_value ~ ( n ~ key_value )* }
key_value       =  { key ~ value }
getter          =  { "$" ~ query }
boolean         =  { "true" | "false" }
quantity        =  @{
  "-"?
  ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
  ~ ("." ~ ASCII_DIGIT*)?
  ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}// TODO: decimals (copy json)
binary          =  { "0" ~ ( "b" ~ bits | "x" ~ hexa ) }
bits            =  { ("0"|"1")+ }
hexa            =  { ('0'..'9'|'a'..'f'|'A'..'F')+ }
text            = _{ "\"" ~ text_inner ~ "\"" }
text_inner      = @{ char* }
char            =  {
  !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

setter          =  { setter_not | setter_long | setter_short }
setter_short    =  {
  "(" ~ s?
    ~ value_inline ~ s? ~ setter_operator ~ s? ~ value_inline
  ~ s? ~ ")"
}
setter_long     =  { "~" ~ key ~ value? }
setter_not      =  { "!" ~ value_inline }
setter_operator =  { binary_op | comparator | arithmetic | logic }
comparator      = _{ "=" | "!" | ">=" | "<=" | ">" | "<" }
arithmetic      = _{ "+" | "-" | "/" | "*" | "^" | "%" }
logic           = _{ "|" | "&" }
binary_op       = _{ ">>" | "<<" }
