{"config":{"lang":["en","fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>drop'in is a technology for creating cross-platform applications (web, Android and iOS) based on a single code written in files called Recipes. All aspects of your project are defined in Recipes, from the graphical interface to the business logic and data management, so you do not need to know any programming language to create your application.</p> <p>Blue Forest, a French company based at Marseille, is currently developing this technology and uses drop'in to create applications for its clients. After many years of research and development, we believe that this technology can be useful to a larger number of organizations and individuals, so we decided to make it accessible to everyone. We have published this documentation to introduce the basic Concepts of drop'in and to help you understand how you can use it to create your own applications.</p> <p>At the moment we are working on a free restricted version of drop'in that will soon be available under the name <code>alpha</code>. We invite you to fill out this form if you want to participate in this test phase. We will also publish more informations on this documentation as our work progresses. When the alpha period will end, we will release a <code>beta</code> version that will be accessible to everyone, and then a <code>stable</code> version that will be the final version of drop'in.</p> <p>drop'in is an open-source technology whose compiler will be released under the AGPL license, and we will also provide paid tools to facilitate the collaborative creation of your applications and their publication with the automation of deployment and update tasks. All its features are described in the <code>dropin.cloud</code> section of this documentation, so you will be able to easily identify which features will be free and which will be paid.</p> <p>If you have any questions, feel free to contact us by email at <code>dropin@blueforest.cc</code> or on GitHub in the <code>Discussions</code> section of our repository.</p>"},{"location":"#internationalization","title":"Internationalization","text":"<p>This documentation is also available in French. You can change the language of the documentation by using the language selector at the top right of the page, aside the search bar. If you want to contribute to the translation of this documentation, you can do it on GitHub by creating a Pull Request.</p>"},{"location":"#license","title":"License","text":"<p>The content of this repository is licensed under a CC BY-NC-SA 4.0 license, you may redistribute it and/or modify it under the terms of the license. Concerning the source code, it is licensed under the MIT license.</p>"},{"location":"cloud/","title":"dropin.cloud","text":"<p>dropin.cloud is a cloud service provided by Blue Forest to help you create and manage your applications based on the drop'in technology. It is currently in an alpha phase and is not yet accessible to everyone. If you want to participate in this test phase, you can fill out this form but be aware that the accesses will not be launched until we have finalized all the necessary preparations.</p> <p>dropin.cloud ecosystem will be composed of four main services:</p> <ul> <li>Studio: create your applications based on Models</li> <li>Editor: daily manage your data structure</li> <li>Catalog: a marketplace of drop'in Models and Projects</li> <li>Community: a place to share your creations and find inspiration</li> </ul>"},{"location":"cloud/#studio","title":"Studio","text":"<p>Studio allows you to describe a logical and visual behavior in the form of Models.</p> <p>For all Interfaces Concepts, Studio will allow you to visualize in real time the changes you make to your application. Via an interactive editor, you can easily manage for example your Components and your Styles.</p> <p>For more algorithmic Concepts, Studio will allow you to describe your application in the form of interactive blocks and assemble them to define for example your Functions.</p> <p>For each concept of a Model, Studio will allow you to describe your application without having to write a single line of code. However, if you want to go further, you can still edit the source code of your application directly from Studio.</p> <p>To see some examples of Studio interfaces, here are some pages to consult:</p> <ul> <li>Interfaces</li> <li>Automations</li> <li>Models</li> </ul>"},{"location":"cloud/#community","title":"Community","text":"<p>Here are some features that we have planned for this service:</p> <ul> <li>Publications: activity feed linked to the Fediverse with ActivityPub</li> <li>Messages: private messages between users encrypted end-to-end</li> <li>Manuals: write and share your documentations privately or publicly</li> <li>Translations: tool to easily translate your content</li> <li>Tasks: manage your projects with tasks and subtasks</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>The development of drop'in was divided into seasons and episodes: we have been going from version to version since 2016 and we are currently at episode 2 of season 6.</p> <p>During our journey we went through several technical stacks with a multitude of sandboxes which allowed us to progressively establish a set of features and define core Concepts.</p> <p>In previous seasons, drop'in was used as part of Blue Forest's services to create cross-platform applications for its clients. Today, we have finalized the specifications of drop'in to make it available publicly allowing anyone to build their own applications in total autonomy.</p>"},{"location":"roadmap/#alpha","title":"alpha","text":"<p>This first phase will be dedicated to the implementation of the fundamental Concepts of drop'in with all that is necessary for the creation of applications such as Interfaces or Automations for example. In this phase we will also propose a first version of all the Concepts related to the constitution of a Model, they are marked with the mention \"alpha\" in the documentation.</p> <p>Our strategy will be to use Visual Studio Code as a base and integrate our extension to access all drop'in features. The projects will be hosted on the service of your choice (GitHub, GitLab, Gitea, BitBucket, ...) and the use of dropin.cloud will be possible through the extension that will guide you throughout the creation of your application. This documentation will also be integrated in the extension.</p> <p>We are actively working on this phase but we do not have a release date yet. However, we have already made this registration form available to be informed about the alpha release and to be able to test the extension as soon as it becomes available.</p> <p>Once the phase is launched, access to dropin.cloud will be completely free and limited to a specific number of resources. Access will be by invitation only, a registration form will be made available to allow anyone to request access on our final homepage.</p> <p>What is or will be made open source:</p> <ul> <li>this documentation</li> <li>our language schemas</li> <li>the source code of the Visual Studio Code extension</li> </ul>"},{"location":"roadmap/#beta","title":"beta","text":"<p>This phase will be devoted to stabilizing all existing features and adding new ones.</p> <p>Among the upcoming features that will offer a new level of possibilities, we have:</p> <ul> <li>Migrations which will make it easier to change the data structure between different versions of your application</li> <li>Syntaxes which will allow to decompose any text</li> <li>Connectors which will allow to connect your application to any third party service through APIs</li> <li>... and all the other Concepts that have the \"beta\" mention in the documentation</li> </ul> <p>The use of Visual Studio Code will still be possible but we will also provide a web editor for those who do not wish to install anything on their machine. We will also be offering a mobile editor (web, Android and iOS) for those who want to create applications on their phone or tablet. Finally, a desktop version (Linux, Windows and MacOS) will also be available so that you do not have to use a browser.</p> <p>Access to dropin.cloud will be possible without an invitation and a free version with a limited number of resources will still be available. Users will also be able to choose to upgrade to a paid subscription for unlimited resources and access to an advanced technical support. We will communicate more about the pricing and features of the paid subscription before the beta version will be released.</p> <p>In addition to what is open source the alpha version, our language compiler source code will also be publicly available. The only services that will not be open source will be those integrated to dropin.cloud and that require creation of an account to use them.</p>"},{"location":"roadmap/#stable","title":"stable","text":"<p>This last phase will allow us to stabilize all the functionalities by locking the drop'in specifications while ensuring that all the functionalities are fully tested.</p> <p>In addition, new features will be added to allow the creation of more complex applications. Among these, we have:</p> <ul> <li>Containers which will allow to describe the functioning of any containerized application</li> <li>Repositories which will allow to link a Git code repository to a Container</li> <li>Deployments which will allow to deploy a Container on dropin.cloud</li> <li>Databases which will allow you to use a specific database for use in a Function</li> <li>... and all other Concepts with the mention \"stable\" in the documentation</li> </ul> <p>It is essential for us to be able to guarantee maximum stability and security for our users. We have therefore decided not to offer a stable version until we have achieved this goal.</p>"},{"location":"concepts/","title":"Concepts","text":"<p>A drop'in Concept is a set of features that allows you to describe a specific need. In other words, we have created a Concept for each aspect that you may need when creating an application.</p> <p>In this section you will find all the Concepts available on drop'in divided in 10 main categories:</p> <ul> <li>Recipes : highlights the Concepts common to all Recipes</li> <li>Owners : highlights Concepts related to Users and Organizations registered on drop'in</li> <li>8 Recipes categories</li> </ul> <p>For each Concept, you will find a description of how it works as well as examples of use in the final version of the documentation.</p> <p>In addition, thanks to Studio you can describe your application without having to write code or know all the specifications of the Recipes because all drop'in Concepts are accessible via a graphical interface.</p>"},{"location":"concepts/auth/","title":"Auth","text":"<p>Auth allows the Owners to identify themselves and be assigned specific access.</p>"},{"location":"concepts/auth/groups/","title":"Groups","text":"<p>Groups describe the access of a User on the resources of an Owner such as:</p> <ul> <li>the access to an Organization (administration, billing, access, Tokens, Realms, Payments, ...)</li> <li>Models (creation, modification, deletion, ...)</li> <li>Projects by specifying for each the Permissions to use</li> </ul> <p>Once created, a Group can be assigned to Users. It is even possible to assign additional conditions to create sub-groups.</p>","tags":["cloud","alpha"]},{"location":"concepts/auth/permissions/","title":"Permissions","text":"<p>Permissions describe the access of a User to the resources of a Model.</p>","tags":["cloud","alpha"]},{"location":"concepts/auth/realms/","title":"Realms","text":"<p>A Realm allows Organizations to register Users through a combination of email addresses and a password.</p> <p>When a Users registers in dropin.cloud, they are using the drop'in Realm. When a User registers on a Project or an Organization that uses the authentication features of drop'in, he uses the Realm defined by it.</p> <p>An Organization may set up a Realm to restrict Users accounts to a single email address or allow the option of using multiple email addresses.</p>","tags":["cloud","alpha"]},{"location":"concepts/auth/tokens/","title":"Tokens","text":"<p>A Token is a string in JWT format allowing the identification and verification of the access levels of a User or an Organization.</p>","tags":["cloud","alpha"]},{"location":"concepts/automations/","title":"Automations","text":"<p>Automations allow the automatic execution of logic.</p>"},{"location":"concepts/automations/#studio-overview-dropincloud","title":"Studio overview (dropin.cloud)","text":"<p>Here is a preview of the Studio interface for managing Functions:</p> <p></p>"},{"location":"concepts/automations/deployments/","title":"Deployments","text":"<p>Deployments allow the execution of a Container.</p> <p>Are described:</p> <ul> <li>the environment variables to use</li> <li>the ports to be redirected by a Domain</li> <li>the ports accessible by other Deployments</li> <li>maximum resources to use (memory and processor)</li> <li>the Volumes to use</li> </ul>","tags":["cloud","stable"]},{"location":"concepts/automations/functions/","title":"Functions","text":"<p>Functions are used to describe behavior in Steps when a Trigger is activated or when executed manually.</p>","tags":["alpha"]},{"location":"concepts/automations/functions/#steps","title":"Steps","text":"<p>A Step is a series of actions performed by Functions. The Steps are linked by a system of dependencies allowing to identify their execution order. The actions of a Step are executed successively.</p>","tags":["alpha"]},{"location":"concepts/automations/functions/#actions","title":"Actions","text":"<ul> <li>request: send a request to a server (HTTP, WebSocket, ...)</li> <li>lookup: browse a data with Manipulators to extract information</li> <li>parse: allows to pass from a text to an object via a Syntax</li> <li>cryptography: generates encryption keys (bcrypt, JWT, UUID, RSA, ...)</li> <li>collection: performs a read or write operation on a Collection</li> <li>function: call another Function with its Options</li> <li>connector: communication with an external service (API) via a Connector and its Options</li> <li>database: performs reads or writes with a query</li> <li>email: allows manual sending of messages</li> <li>page: allows to simulate the navigation on a Page</li> </ul>","tags":["alpha"]},{"location":"concepts/automations/migrations/","title":"Migrations","text":"<p>Migrations define the operations to perform in case of modification of the Format of Collections.</p> <p>It will be possible to apply a Migration during the update of the Model of a Project.</p>","tags":["cloud","beta"]},{"location":"concepts/automations/triggers/","title":"Triggers","text":"<p>Triggers allow the execution of Functions based on specific criterias:</p> <ul> <li>waiting for a request from a Domain (HTTP, WebSocket)</li> <li>time regularity (CRON)</li> </ul>","tags":["cloud","alpha"]},{"location":"concepts/catalog/","title":"Catalog","text":"<p>Get access to the drop'in Catalog from dropin.cloud and discover Models and Projects created by the community.</p> <p>A point system will be implemented to reward the most popular items and the most active contributors.</p> <p>Paid items could also be available in the future, based on a subscription model or a one-time payment. Obviously, only certified organizations will be able to publish that kind of items to avoid any potential pricing abuse.</p>"},{"location":"concepts/catalog/models/","title":"Models","text":"<p>A Model is a group of Recipes with a Versioning system.</p> <p>The elements defined in a Model are:</p> <ul> <li>an icon and a description</li> <li>the Users authors</li> <li>the Format of its Options</li> <li>the default configuration of the hosts used for the Connectors</li> <li>the stages possible for a Task of the Community</li> </ul> <p>Each Version is isolated from the others but it is possible to link Recipes between them.</p> <p>Recipes that can be found in a Model are:</p> <ul> <li> <p>for Interfaces:</p> <ul> <li>Components</li> <li>Styles</li> <li>Pages</li> <li>Sessions</li> </ul> </li> <li> <p>for Storage:</p> <ul> <li>Collections</li> <li>Metrics</li> <li>Logs</li> <li>Values</li> </ul> </li> <li> <p>for Validations:</p> <ul> <li>Types</li> <li>Anomalies</li> <li>Syntaxes</li> </ul> </li> <li> <p>for Automation</p> <ul> <li>Functions</li> <li>Triggers</li> <li>Migrations</li> <li>Deployments</li> </ul> </li> <li> <p>for Authentication:</p> <ul> <li>Permissions</li> </ul> </li> <li> <p>for Endpoints:</p> <ul> <li>Connectors</li> </ul> </li> <li> <p>for Editor:</p> <ul> <li>Sections</li> <li>Visualizations</li> <li>Forms</li> <li>Maps</li> </ul> </li> </ul>","tags":["alpha"]},{"location":"concepts/catalog/models/#studio-overview-dropincloud","title":"Studio overview (dropin.cloud)","text":"<p>The alpha version of drop'in Studio will be based on Visual Studio Code with which an extension has been developed. In this way, initial features like file structure browsing, file navigation and Git versioning support are already available.</p> <p>Here is an example of a Model Recipe on Studio:</p> <p></p>","tags":["alpha"]},{"location":"concepts/catalog/models/#schema","title":"Schema","text":"<p>Overview</p> <p>Source</p>","tags":["alpha"]},{"location":"concepts/catalog/projects/","title":"Projects","text":"<p>A Project is the use of a Model: it applies the content of the Recipes of a Model to work. It is therefore possible to have a single Model and several Projects with specific Options for each environment.</p> <p>The elements specified in a Project are:</p> <ul> <li>a Model, its Version and its Options</li> <li>the configuration of the hosts used for Connectors</li> <li>platform-specific informations (web, Android, iOS, Linux, Windows, macOS)</li> </ul> <p>When updating a Model, it will be possible to manually or automatically migrate the Project to a new version.</p>","tags":["cloud","alpha"]},{"location":"concepts/editor/","title":"Editor","text":"<p>Editor is a dropin.cloud service that provide a daily management interface for a data structure based on the Recipes of a Model. This is a kind of back-office automatically generated from the specifications you defined in your Project.</p> <p>To use Editor, the first thing you need to do is to choose one of your Projects for its Sections to be loaded. Each Section describes the content of Editor pages with a real-time display of your data.</p> <p>In addition to the ability to manage your data, Editor will allow you to trigger Actions that will result in the execution of specific Functions, but also to manage all the Users of your Realm if you have one.</p>"},{"location":"concepts/editor/#interfaces-overview","title":"Interfaces overview","text":"<p>Here are some examples of interfaces that will be available in Editor.</p> <p>The aesthetics of these interfaces is not finalized and will be greatly evolving before the release of the alpha version, it is here essentially designed to highlight Editor features.</p> <p>The current shown interfaces are in French, but the final version will obviously be available in English.</p> <p> </p>      Edition of a Collection Item    <p> </p>      View of a Collection <p> </p> Click on a header column <p> </p> Columns tool <p> </p> Filters tool <p> </p> Density tool <p> </p> Export tool"},{"location":"concepts/editor/forms/","title":"Forms","text":"<p>Forms allow to create a dynamic questionnaire that can evolve according to the answers given to the previous questions.</p>","tags":["cloud","beta"]},{"location":"concepts/editor/maps/","title":"Maps","text":"<p>Maps allow to interactively navigate on addresses or geolocation data.</p>","tags":["cloud","beta"]},{"location":"concepts/editor/sections/","title":"Sections","text":"<p>Sections allow to add to the Editor the ability to manage Collection Items and access to custom dashboards.</p> <p>The following Section types will be available:</p> <ul> <li>Visualizations</li> <li>Collections</li> <li>Realm Users</li> </ul> <p>In order to display Collection Items, here are the modes that will be possible:</p> <ul> <li>List (interfaces preview)</li> <li>Kanban</li> <li>Spreadsheet</li> <li>Interactive map (Google Maps or OpenStreetMap)</li> </ul>","tags":["cloud","alpha"]},{"location":"concepts/editor/visualizations/","title":"Visualizations","text":"<p>Visualizations allow to create an interactive graphical representation to display a set of data.</p>","tags":["cloud","alpha"]},{"location":"concepts/editor/visualizations/#interfaces-overview","title":"Interfaces overview","text":"Lines Areas Bars Dots Bubbles","tags":["cloud","alpha"]},{"location":"concepts/endpoints/","title":"Endpoints","text":"<p>Endpoints allow receiving and sending requests from and to external services.</p>"},{"location":"concepts/endpoints/addresses/","title":"Addresses","text":"<p>Addresses allow to store IPs in IPv4 and/or IPv6 format.</p>","tags":["stable"]},{"location":"concepts/endpoints/connectors/","title":"Connectors","text":"<p>Connectors allow to define the specifications of communications with external services.</p> <p>There are several types of requests:</p> <ul> <li>HTTP (host, path, method, headers, parameters, body and possible responses)</li> <li>WebSocket (data to send and receive)</li> </ul>","tags":["beta"]},{"location":"concepts/endpoints/databases/","title":"Databases","text":"<p>Databases allow you to configure communications with an external database management system.</p> <p>Would be compatible in the long run:</p> <ul> <li>MongoDB</li> <li>MySQL and MariaDB</li> <li>PostgreSQL</li> <li>Prometheus</li> <li>Redis</li> <li>Cassandra</li> <li>ElasticSearch</li> <li>RethinkDB</li> <li>InfluxDB</li> <li>SQLite</li> <li>Neo4j</li> <li>CouchDB</li> <li>ArangoDB</li> </ul>","tags":["stable"]},{"location":"concepts/endpoints/domains/","title":"Domains","text":"<p>Domains allow you to describe a routing on Pages, Triggers and Deployments.</p> <p>It is possible to manage prefixes and subdomains to organize the structure of your applications.</p> <p>A Project must be provided for each routing.</p>","tags":["cloud","alpha"]},{"location":"concepts/endpoints/providers/","title":"Providers","text":"<p>Providers allow to define a communication with a package manager.</p> <p>Would be compatible in the long run:</p> <ul> <li>containers (Docker Hub, ...)</li> <li>repositories (GitHub, GitLab, ...)</li> <li>npm (JavaScript)</li> <li>pip (Python)</li> <li>helm (Kubernetes)</li> <li>arch (pacman)</li> <li>nix</li> <li>apt (Debian)</li> <li>yum (Red Hat)</li> <li>gem (Ruby)</li> <li>maven (Java)</li> <li>gradle (Java)</li> <li>composer (PHP)</li> <li>conan (C/C++)</li> <li>nuget (C#)</li> <li>dotnet</li> </ul>","tags":["cloud","stable"]},{"location":"concepts/interfaces/","title":"Interfaces","text":"<p>Interfaces include all the resources needed to design web, desktop and mobile graphic experiences.</p>"},{"location":"concepts/interfaces/#studio-overview-dropincloud","title":"Studio overview (dropin.cloud)","text":"<p>Here is a preview of the Studio interface for managing Components. You will notice that some Blocks are missing, we have recently migrated to a new version of our renderer and we still have some to migrate.</p> <p></p> <p></p>"},{"location":"concepts/interfaces/components/","title":"Components","text":"<p>Components allow you to create a graphical interface made up of reusable and nestable elements. The entire content of a Component is defined by Blocks that are divided into two categories: Static Blocks and Dynamic Blocks.</p>","tags":["alpha"]},{"location":"concepts/interfaces/components/#blocks","title":"Blocks","text":"<p>Each Block has Options that allow you to define its behavior. For example, it is possible to define the triggering of a Function when a Block is pressed, or as a condition to determine whether a Block should be displayed or not.</p> <p>Blocks can also be linked to Styles that allow you to define their appearance. Applying a Style can be conditioned by a condition executed by a Function.</p>","tags":["alpha"]},{"location":"concepts/interfaces/components/#static-blocks","title":"Static Blocks","text":"<ul> <li>Zone: allows grouping Blocks</li> <li>Text: displays text potentially in multiple languages</li> <li>Image: displays an image contained in a Volume or from an external URL</li> <li>Link: link to a Page or an external URL</li> <li>Button: triggers an action when pressed</li> <li>Input: user input</li> <li>Checkbox: allows you to define a binary state</li> <li>Video: displays a video contained in a Volume or from an external URL</li> <li>Divider: dynamically separates two Blocks horizontally or vertically</li> <li>Draggable: allows you to move this Block to a Droppable Block</li> <li>Droppable: groups Draggable Blocks</li> </ul>","tags":["alpha"]},{"location":"concepts/interfaces/components/#dynamic-blocks","title":"Dynamic Blocks","text":"<ul> <li>Component: allows you to call another Component Recipe</li> <li>Reference: allows you to display the value of an Option of another Block</li> <li>Iteration: allows you to display as many Blocks as there are elements returned by a Function</li> </ul>","tags":["alpha"]},{"location":"concepts/interfaces/components/#schema","title":"Schema","text":"<p>Overview</p> <p>Source</p>","tags":["alpha"]},{"location":"concepts/interfaces/pages/","title":"Pages","text":"<p>Pages allow you to define a Component to be used to enable mobile, desktop or web browsing through a Domain.</p> <p>The configuration of the Pages depends on the platform on which it will appear:</p> <ul> <li>web: path with possible parameters ({id})</li> <li>mobile and desktop: application id and deep linking URLs</li> </ul>","tags":["cloud","alpha"]},{"location":"concepts/interfaces/sessions/","title":"Sessions","text":"<p>Sessions allow communication with the local storage system when displaying a Page.</p> <p>On each platform, different systems can be defined as for example on the web where you can specifically use cookies or IndexedDB.</p>","tags":["alpha"]},{"location":"concepts/interfaces/styles/","title":"Styles","text":"<p>Styles allow you to apply display rules for the Blocks of a Component.</p> <p>There are several categories of Styles:</p> <ul> <li>Dimensions: size of a Block</li> <li>Position: positioning of a Block</li> <li>Margins: spacing between a Block and its neighbors</li> <li>Gutters: spacing inside a Block</li> <li>Background: background style of a Block</li> <li>Borders: border style of a Block</li> <li>Shadows: shadow of a Block</li> <li>Text: related to the Text Block</li> <li>Zone: related to the Zone Block</li> <li>Input: related to the Input Block</li> </ul> <p>A Style is decomposed into several Classes that all have a unique name. Each Class can be applied to any Block.</p> <p>It is possible to create conditional Classes in order to apply Styles depending on conditions based on: - the platform (web, Android, iOS, linux, windows, macOS) - the dimensions (height and width) - the state (hover, focus, print)</p> <p>Finally, it is possible to create animations in order to use styles frames on a Block with a defined duration and frequency.</p>","tags":["alpha"]},{"location":"concepts/interfaces/styles/#schema","title":"Schema","text":"<p>Overview</p> <p>Source</p>","tags":["alpha"]},{"location":"concepts/interfaces/themes/","title":"Themes","text":"<p>Themes allow you to define a graphic charter with colors, sizes, fonts and global Styles.</p>","tags":["alpha"]},{"location":"concepts/owners/","title":"Owners","text":"<p>Owners can:</p> <ul> <li>access a Project which is based on a Model</li> <li>edit Recipes from a Model</li> </ul> <p>Recipes that can be found at the Owner level are:</p> <ul> <li> <p>for the Catalog:</p> <ul> <li>Models</li> <li>Projects</li> </ul> </li> <li> <p>for Interfaces:</p> <ul> <li>Themes</li> </ul> </li> <li> <p>for Storage:</p> <ul> <li>Volumes</li> <li>Repositories</li> <li>Containers</li> </ul> </li> <li> <p>for Authentication:</p> <ul> <li>Realms</li> <li>Groups</li> </ul> </li> <li> <p>for Endpoints:</p> <ul> <li>Domains</li> <li>Addresses</li> <li>Providers</li> <li>Databases</li> </ul> </li> </ul>"},{"location":"concepts/owners/organizations/","title":"Organizations","text":"<p>Organizations are created and owned by Users.</p> <p>Unlike Users, Organizations do not have the ability to authenticate on drop'in interfaces. As a result, all exchanges via API must use manually generated Tokens.</p> <p>Another difference with Users is that an Organization can create Realms to allow the registration of Users, and Payments to make bank transactions.</p> <p>Payments allow you to use the credit card of a User via Components in the context of a Project.</p>","tags":["cloud","beta"]},{"location":"concepts/owners/users/","title":"Users","text":"<p>A User is an individual registered with one or more Realms. He or she must have at least one email address and a password.</p> <p>Each User has account data (personal information, preferences, passwords). Realms being isolated, this data is specific to each Realm of registration. Only email addresses can be shared.</p> <p>Users cannot use Realms or Payments without going through an Organization.</p>","tags":["cloud","alpha"]},{"location":"concepts/recipes/","title":"Recipes","text":"<p>A Recipe is the description of an entity, a state or a behavior.</p> <p>drop'in allows the writing of 32 different types of Recipes each having a specific role.</p> <p>There are two types of Recipes:</p> <ul> <li> <p>those directly linked to an Owner such as Groups, Volumes, or Domains</p> </li> <li> <p>those found in a Model (such as Components, Functions or Collections) that can be used to create Projects or be shared with other users via the Catalog.</p> </li> </ul>"},{"location":"concepts/recipes/#categories","title":"Categories","text":"<ul> <li>Catalog: management of Models and Projects</li> <li>Interfaces: creating graphical experiences</li> <li>Storage: persistence of formatted data</li> <li>Automations: automated actions</li> <li>Validations: verification of data conformity</li> <li>Auth: management of Users accesses</li> <li>Endpoints: connection to external services</li> <li>Editor: Projects administration</li> </ul>"},{"location":"concepts/recipes/#header-data","title":"Header data","text":"<ul> <li>name</li> <li>description</li> <li>terms, to define the name of the Recipe to qualify a single entity and for several entities</li> <li>labels, words allowing to create filters to select a set of Recipes</li> </ul>"},{"location":"concepts/recipes/formats/","title":"Formats","text":"<p>Formats are data structure definitions and can be composed of:</p> <ul> <li>Unique native types composed of other Formats</li> <li>Custom types created by Owners containing other Formats</li> </ul> <p>Formats are for example used:</p> <ul> <li>in Options of Recipes</li> <li>in Variations of Types</li> <li>in Fields of Collections</li> <li>in Setter \"Format comparison\"</li> </ul> <p>A Format of native object type can contain the information of all required fields as well as default values to be used.</p> <p>When using a Format, it is possible to place Constraints on the manipulated data by giving a validity condition and an Issue. If the condition is not met, the Issue is triggered and returns custom errors.</p> <p>Formats can also contain Labels to apply dynamic selections with for example the \"search\" step in a Function.</p>"},{"location":"concepts/recipes/formats/#native-types","title":"Native types","text":""},{"location":"concepts/recipes/formats/#unique","title":"Unique","text":""},{"location":"concepts/recipes/formats/#audio","title":"Audio","text":"<ul> <li>Options: Volume to use, list of accepted extension, min and max size, min and max duration</li> <li>Format: File Item</li> </ul>"},{"location":"concepts/recipes/formats/#binary","title":"Binary","text":"<ul> <li>Options: min and max size</li> <li>Format: binary</li> </ul>"},{"location":"concepts/recipes/formats/#boolean","title":"Boolean","text":"<ul> <li>Display: edit date</li> <li>Variations:<ul> <li>basic: boolean</li> <li>task: object with one boolean and two dates</li> </ul> </li> </ul>"},{"location":"concepts/recipes/formats/#choice","title":"Choice","text":"<ul> <li>Options: min and max choices, possibilities with their description</li> <li>Format: list of choices</li> </ul>"},{"location":"concepts/recipes/formats/#color","title":"Color","text":"<ul> <li>Variations:<ul> <li>Hexadecimal: object with text and opacity</li> <li>RGBA: object with texts (red, green, blue and opacity)</li> <li>HSLA: object with texts</li> </ul> </li> </ul>"},{"location":"concepts/recipes/formats/#date","title":"Date","text":"<ul> <li>Options: min and max</li> <li>Format: timestamp</li> <li>Display: units (seconds, minutes, hours, days, months, years)</li> </ul>"},{"location":"concepts/recipes/formats/#duration","title":"Duration","text":"<ul> <li>Options: min and max</li> <li>Format: duration</li> <li>Display: units (seconds, minutes, hours, days, months, years)</li> </ul>"},{"location":"concepts/recipes/formats/#e-mail","title":"E-mail","text":"<ul> <li>Options: domain name to use, Regular expression on name</li> <li>Format: text</li> </ul>"},{"location":"concepts/recipes/formats/#file","title":"File","text":"<ul> <li>Options: Volume to use, accepted extension tables, min and max size</li> <li>Format: File Item</li> </ul>"},{"location":"concepts/recipes/formats/#image","title":"Image","text":"<ul> <li>Options: Volume to use, supported extension tables, min and max size, min and max dimensions</li> <li>Format: File Item</li> </ul>"},{"location":"concepts/recipes/formats/#item","title":"Item","text":"<ul> <li>Options: Collection with its Options</li> <li>Format: Item of Item</li> </ul>"},{"location":"concepts/recipes/formats/#location","title":"Location","text":"<ul> <li>Options: country included</li> <li>Format: object</li> <li>Display: map, fields (name, number, street, region, city, country, postal code and GPS coordinates)</li> </ul>"},{"location":"concepts/recipes/formats/#measure","title":"Measure","text":"<ul> <li>Options: decimals, min and max, conversion table</li> <li>Display: unit</li> <li>Format: object with quantity and unit</li> </ul>"},{"location":"concepts/recipes/formats/#period","title":"Period","text":"<ul> <li>Options: min and max dates</li> <li>Format: object with two dates</li> </ul>"},{"location":"concepts/recipes/formats/#telephone","title":"Telephone","text":"<ul> <li>Options: list of accepted country prefixes</li> <li>Display: grouping of numbers, separator</li> <li>Format: object with prefix and text with number</li> </ul>"},{"location":"concepts/recipes/formats/#price","title":"Price","text":"<ul> <li>Options: min and max, list of accepted currencies</li> <li>Display: currency</li> <li>Format: measure with currency</li> </ul>"},{"location":"concepts/recipes/formats/#quantity","title":"Quantity","text":"<ul> <li>Options: decimal, min and max</li> <li>Format: quantity</li> </ul>"},{"location":"concepts/recipes/formats/#recurrence","title":"Recurrence","text":"<ul> <li>Format: period and interval (seconds, minutes, hours, days, months, years)</li> </ul>"},{"location":"concepts/recipes/formats/#text","title":"Text","text":"<ul> <li>Options: min size, max size, Regular expression</li> <li>Variations:<ul> <li>text</li> <li>by number: name for one, name for many, article if applicable</li> <li>by language: for each language, a text or by number</li> </ul> </li> </ul>"},{"location":"concepts/recipes/formats/#url","title":"URL","text":"<ul> <li>Format: text</li> </ul>"},{"location":"concepts/recipes/formats/#video","title":"Video","text":"<ul> <li>Options: Volume to use, accepted extension tables, min and max size, min and max dimensions</li> <li>Format: File Item</li> </ul>"},{"location":"concepts/recipes/formats/#compounds","title":"Compounds","text":""},{"location":"concepts/recipes/formats/#index","title":"Index","text":"<p>Dynamic keys and common formats</p> <ul> <li>Options: list of possible keys</li> </ul>"},{"location":"concepts/recipes/formats/#list","title":"List","text":"<p>Ordered set of the same Format</p> <ul> <li>Options: min and max size</li> </ul>"},{"location":"concepts/recipes/formats/#object","title":"Object","text":"<p>Fixed keys and individual Formats</p> <ul> <li>Options: object with required fields and default values</li> </ul>"},{"location":"concepts/recipes/getters/","title":"Getters","text":"<p>A Getter allows to access information dynamically.</p> <p>There are two types of access:</p> <ul> <li> <p>local, it is information at the level of a Recipe</p> </li> <li> <p>external, it is information loaded from another Recipe or a Collection Item</p> </li> </ul> <p>In a text, it is possible to use a Getter to make a text dynamic.</p>"},{"location":"concepts/recipes/options/","title":"Options","text":"<p>Options allow Recipes to use custom parameters when they run.</p> <p>In each Recipe, the expected Options are defined by a Format making them usable in the Recipe through a Getter.</p>"},{"location":"concepts/recipes/setters/","title":"Setters","text":"<p>Setters are used to determine and transform data.</p> <p>In the different Setters below, the values used are:</p> <ul> <li>either raw data</li> <li>or from a Getter</li> </ul> <p>In a text, it is possible to use a Setter to make a text dynamic.</p>"},{"location":"concepts/recipes/setters/#operations","title":"Operations","text":""},{"location":"concepts/recipes/setters/#arithmetic","title":"Arithmetic","text":"<ul> <li>addition: list of quantities</li> <li>subtraction: list of quantities</li> <li>multiplication: list of quantities</li> <li>division: list of quantities</li> <li>power: quantity</li> <li>square root: quantity</li> <li>exponential: quantity</li> <li>logarithm: quantity</li> <li>modulo: two quantities</li> </ul>"},{"location":"concepts/recipes/setters/#logic","title":"Logic","text":"<ul> <li>exists: value</li> <li>and: list of booleans</li> <li>or: list of booleans</li> <li>no: boolean</li> </ul>"},{"location":"concepts/recipes/setters/#comparisons","title":"Comparisons","text":"<ul> <li>less than (&lt;): two quantities</li> <li>at most (&lt;=): two quantities</li> <li>at least ()&gt;=): two quantities</li> <li>more than (&gt;): two quantities</li> <li>equal to: two quantities</li> <li>different from: two quantities</li> <li>different from all: one value, a list of values</li> <li>different from one: one value, a list of values</li> <li>same to all: one value, a list of values</li> <li>same to one: a value, a list of values</li> </ul>"},{"location":"concepts/recipes/setters/#formats","title":"Formats","text":""},{"location":"concepts/recipes/setters/#common","title":"Common","text":"<ul> <li>length: size in characters of a value or elements of a list</li> <li>instance of: value to check, Format to use</li> </ul>"},{"location":"concepts/recipes/setters/#texts","title":"Texts","text":"<ul> <li>concatenate: values, separator text (\" \")</li> <li>split: value, separator text</li> <li>match: text to search, regular expression</li> <li>replace: text to search, text to replace, replacement text</li> <li>translate: value, language, number, item to use</li> <li>lowercase: text</li> <li>upper case: text</li> <li>capitalize first letters of each word (titleCase): text</li> <li>truncate leading and trailing spaces (trim): text, characters ([\"\"]), right (true), left (true)</li> <li>abbreviate (summarize): text, maximum, end text (\"...\")</li> <li>transform a text with a Syntax (encode): text, Syntax and its Options</li> <li>pick: select a part of the text to cut with the beginning and the end</li> </ul>"},{"location":"concepts/recipes/setters/#quantities","title":"Quantities","text":"<ul> <li>average: list of quantities</li> <li>rounding: quantity, number of decimals (2), type of rounding (nearest, lower or higher)</li> </ul>"},{"location":"concepts/recipes/setters/#dates","title":"Dates","text":"<ul> <li>duration between two dates: start, end, return unit (\"s\")</li> <li>day of the week of a date: date</li> <li>extraction (day, week, month, year, hours, ...): date</li> <li>add a period to a date: date, period (days, months, years, ...)</li> </ul>"},{"location":"concepts/recipes/setters/#lists","title":"Lists","text":"<ul> <li>maximum quantity in a list: list of quantities</li> <li>minimum quantity in a list: list of quantities</li> <li>merge several lists: list of lists</li> <li>select elements (pick): list of values, start index, end index</li> </ul>"},{"location":"concepts/recipes/setters/#values","title":"Values","text":"<ul> <li>random number: minimum quantity (0), maximum quantity (1), number of decimals (2)</li> <li>pi: number of decimals (15)</li> <li>current date: return variation (\"timestamp\")</li> </ul>"},{"location":"concepts/storage/","title":"Storage","text":"<p>Storage allows the storage of data in different textual and binary forms.</p>"},{"location":"concepts/storage/collections/","title":"Collections","text":"<p>A Collection allows the storage of data described with Fields.</p> <p>Fields are defined by a Format.</p> <p>A Collection contains Items.</p>","tags":["cloud","alpha"]},{"location":"concepts/storage/containers/","title":"Containers","text":"<p>Containers describe how an image works for use in a Deployment.</p> <p>Are described:</p> <ul> <li>the necessary operating procedures</li> <li>the available environment variables</li> <li>the directories requiring persistence</li> <li>the available ports</li> <li>recommended memory and processor resources</li> </ul>","tags":["cloud","stable"]},{"location":"concepts/storage/logs/","title":"Logs","text":"<p>Logs allows to store output streams of programs in order to keep traces of their execution.</p> <p>They can for example be used with a Deployment to keep its logs.</p>","tags":["cloud","alpha"]},{"location":"concepts/storage/metrics/","title":"Metrics","text":"<p>Metrics are numbers stored over time to generate chronological statistics.</p>","tags":["cloud","alpha"]},{"location":"concepts/storage/repositories/","title":"Repositories","text":"<p>Repositories allow you to store source code with Git versioning.</p>","tags":["cloud","stable"]},{"location":"concepts/storage/values/","title":"Values","text":"<p>Values are raw data stored in Recipes that correspond to a specific Format.</p>","tags":["beta"]},{"location":"concepts/storage/volumes/","title":"Volumes","text":"<p>Volumes allow the storage of static files (images, videos...) at the level of an Owner, it will then be possible to use its Files in Recipes.</p> <p>To create a Volume, you must indicate an amount in Gigabytes (Go) to reserve.</p> <p>The backups of Volumes is configurable to increase or decrease its regularity.</p>","tags":["cloud","alpha"]},{"location":"concepts/validations/","title":"Validations","text":"<p>Validations allow the verification of data.</p>"},{"location":"concepts/validations/issues/","title":"Issues","text":"<p>Issues describe potential errors usable in Setters, Functions or Types.</p>","tags":["alpha"]},{"location":"concepts/validations/syntaxes/","title":"Syntaxes","text":"<p>Syntaxes allow to perform a decomposition of a textual data via the use of Formats.</p>","tags":["beta"]},{"location":"concepts/validations/types/","title":"Types","text":"<p>Types allow to register and reuse Formats split into Variations.</p> <p>By using a Type in another Recipe, it is possible to test the Format of a data with Setters and to trigger an Issue in case of error.</p>","tags":["alpha"]},{"location":"fr/","title":"Introduction","text":"<p>drop'in est une technologie permettant de cr\u00e9er des applications multi-plateformes (web, Android et iOS) bas\u00e9es sur un code unique \u00e9crit dans des fichiers appel\u00e9s Recettes. Tous les aspects de votre projet sont d\u00e9finis dans des Recettes, qu'il s'agisse de l'interface graphique, de la logique m\u00e9tier ou de la gestion des donn\u00e9es, vous n'avez donc pas besoin de conna\u00eetre de langage de programmation pour cr\u00e9er votre application.</p> <p>Blue Forest, une entreprise fran\u00e7aise bas\u00e9e \u00e0 Marseille, d\u00e9veloppe actuellement cette technologie et utilise drop'in pour cr\u00e9er des applications pour ses clients. Apr\u00e8s de longues ann\u00e9es de recherche et de d\u00e9veloppement, nous pensons que cette technologie peut \u00eatre utile \u00e0 un plus grand nombre d'entreprises et d'individus, et nous avons donc d\u00e9cid\u00e9 de la rendre accessible \u00e0 tous. Nous avons publi\u00e9 cette documentation pour pr\u00e9senter les Concepts de base de drop'in et pour vous aider \u00e0 comprendre comment vous pouvez l'utiliser pour cr\u00e9er vos propres applications.</p> <p>A l'heure actuelle nous travaillons sur une version de drop'in gratuite \u00e0 acc\u00e8s restreint qui sera bient\u00f4t disponible sous l'appellation <code>alpha</code>. Nous vous invitons \u00e0 remplir ce formulaire si vous souhaitez participer \u00e0 cette phase de test. Nous publierons \u00e9galement des informations sur cette documentation au fur et \u00e0 mesure de l'avancement de notre travail. Lorsque la p\u00e9riode d'alpha sera termin\u00e9e, nous publierons une version <code>beta</code> qui sera accessible \u00e0 tous, puis enfin une version <code>stable</code> qui sera la version finale de drop'in.</p> <p>drop'in est une technologie open-source dont le compilateur sera publi\u00e9 sous licence AGPL, et nous mettrons \u00e9galement \u00e0 disposition des outils payants pour faciliter la cr\u00e9ation collaborative de vos applications ainsi que leur publication avec l'automatisation des t\u00e2ches de d\u00e9ploiement et de mise \u00e0 jour. Toutes ses fonctionnalit\u00e9s sont d\u00e9crites dans la section <code>dropin.cloud</code> de cette documentation, vous pourrez donc facilement identifier les fonctionnalit\u00e9s qui seront gratuites et celles qui seront payantes.</p> <p>Si vous avez la moindre question, n'h\u00e9sitez pas \u00e0 nous contacter par e-mail \u00e0 l'adresse <code>dropin@blueforest.cc</code> ou sur GitHub dans la section <code>Discussions</code> de notre d\u00e9p\u00f4t.</p>"},{"location":"fr/#internationalisation","title":"Internationalisation","text":"<p>Cette documentation est \u00e9galement disponible en anglais. Vous pouvez changer la langue actuelle \u00e0 tout moment en cliquant sur l'ic\u00f4ne de la langue en haut \u00e0 droite de la page, a c\u00f4t\u00e9 de la barre de recherche. Par ailleurs, si vous souhaitez contribuer \u00e0 la traduction de cette documentation, vous pouvez le faire en cr\u00e9ant une Pull Request sur GitHub.</p>"},{"location":"fr/#licence","title":"Licence","text":"<p>Le contenu de ce d\u00e9p\u00f4t est sous licence CC BY-NC-SA 4.0, vous pouvez le redistribuer et/ou le modifier selon les termes de la licence. Concernant le code source, il est sous licence MIT.</p>"},{"location":"fr/cloud/","title":"dropin.cloud","text":"<p>dropin.cloud est un service cloud propos\u00e9 par Blue Forest afin de vous aider \u00e0 cr\u00e9er et g\u00e9rer vos applications bas\u00e9es sur la technologie drop'in. Actuellement en phase alpha, il n'est pas encore accessible \u00e0 tous. Si vous souhaitez participer \u00e0 cette phase de test, vous pouvez remplir ce formulaire mais gardez \u00e0 l'esprit que les acc\u00e8s ne seront pas lanc\u00e9s tant que nous n'aurons pas finalis\u00e9 toutes les pr\u00e9parations n\u00e9cessaires.</p> <p>L'\u00e9cosyst\u00e8me de dropin.cloud sera compos\u00e9 de quatre principaux services :</p> <ul> <li>Studio : cr\u00e9ez vos applications bas\u00e9es sur des Mod\u00e8les</li> <li>\u00c9diteur : g\u00e9rez votre structure de donn\u00e9es au quotidien</li> <li>Catalogue : une marketplace de Mod\u00e8les et de Projets drop'in</li> <li>Communaut\u00e9 : un lieu pour partager vos cr\u00e9ations et trouver de l'inspiration</li> </ul>"},{"location":"fr/cloud/#studio","title":"Studio","text":"<p>Studio permet de d\u00e9crire un fonctionnement logique et visuel sous la forme de Mod\u00e8les.</p> <p>Pour tous les Concepts des Interfaces, Studio vous permettra de visualiser en temps r\u00e9el les changements que vous apportez \u00e0 votre application. Via un \u00e9diteur interactif, vous pourrez tr\u00e8s facilement g\u00e9rer par exemple vos Composants et vos Styles.</p> <p>Pour des Concepts plus algorithmiques, Studio vous permettra de d\u00e9crire votre application sous la forme de blocs interactifs et de les assembler pour d\u00e9finir par exemple vos Fonctions.</p> <p>Pour chaque concept d'un Mod\u00e8le, Studio vous permettra de d\u00e9crire votre application sans avoir \u00e0 \u00e9crire une seule ligne de code. Si cependant vous souhaitez aller plus loin, vous pourrez toujours \u00e9diter le code source de votre application directement depuis Studio.</p> <p>Pour voir quelques exemples d'interfaces de Studio, voici quelques pages \u00e0 consulter :</p> <ul> <li>Interfaces</li> <li>Automatisations</li> <li>Mod\u00e8les</li> </ul>"},{"location":"fr/cloud/#communaute","title":"Communaut\u00e9","text":"<p>Voici quelques fonctionnalit\u00e9s que nous avons pr\u00e9vus pour ce service :</p> <ul> <li>Publications : fil d'activit\u00e9 connect\u00e9 au Fediverse avec ActivityPub</li> <li>Messages : messages priv\u00e9s entre utilisateurs chiffr\u00e9s de bout en bout</li> <li>Manuels : r\u00e9digez et partagez vos documentations en priv\u00e9 ou en public</li> <li>Traductions : outil pour traduire facilement vos contenus</li> <li>T\u00e2ches : g\u00e9rez vos projets avec des t\u00e2ches et des sous-t\u00e2ches</li> </ul>"},{"location":"fr/roadmap/","title":"Feuille de route","text":"<p>Le d\u00e9veloppement de drop'in a \u00e9t\u00e9 divis\u00e9 en saisons et \u00e9pisodes : nous sommes pass\u00e9s de version en version depuis 2016 et nous sommes actuellement \u00e0 l'\u00e9pisode 2 de la saison 6.</p> <p>Au cours de parcours, nous avons \u00e9tablis plusieurs stacks techniques avec une multitude d'exp\u00e9rimentations qui nous ont permis de progressivement \u00e9tablir un ensemble de fonctionnalit\u00e9s et de d\u00e9finir des Concepts cl\u00e9s.</p> <p>Durant les saisons pr\u00e9c\u00e9dentes, drop'in a \u00e9t\u00e9 utilis\u00e9 dans le cadre des services de Blue Forest pour cr\u00e9er des applications multi-plateformes pour ses clients. Aujourd'hui, nous avons finalis\u00e9 les sp\u00e9cifications de drop'in pour le rendre disponible publiquement et permettant prochainement \u00e0 n'importe qui de construire ses propres applications en totale autonomie.</p>"},{"location":"fr/roadmap/#alpha","title":"alpha","text":"<p>Cette premi\u00e8re phase sera consacr\u00e9e \u00e0 la mise en place des Concepts fondamentaux de drop'in avec tout ce qui est n\u00e9cessaire \u00e0 la cr\u00e9ation d'applications comme les Interfaces ou les Automatisations par exemple. Dans cette phase, nous allons \u00e9galement proposer une premi\u00e8re version de tous les Concepts li\u00e9s \u00e0 la constitution d'un Mod\u00e8le, ils sont marqu\u00e9s avec la mention \"alpha\" dans la documentation.</p> <p>Notre strat\u00e9gie sera d'utiliser Visual Studio Code comme base et y int\u00e9grer notre extension pour acc\u00e9der \u00e0 toutes les fonctionnalit\u00e9s de drop'in. Les projets seront h\u00e9berg\u00e9s sur le service de votre choix (GitHub, GitLab, Gitea, BitBucket, ...) et l'utilisation de dropin.cloud sera possible par le biais de l'extension qui vous guidera tout au long de la cr\u00e9ation de votre application. Cette documentation sera \u00e9galement disponible au travers de l'extension.</p> <p>Nous travaillons activement sur cette phase mais nous n'avons pas encore de date de sortie. Nous avons cependant d\u00e9j\u00e0 mis \u00e0 disposition ce formulaire d'inscription pour \u00eatre inform\u00e9 de la sortie de la version alpha et pour pouvoir tester l'extension d\u00e8s qu'elle sera disponible.</p> <p>Une fois la phase lanc\u00e9e, l'acc\u00e8s \u00e0 dropin.cloud sera totalement gratuite et limit\u00e9e \u00e0 un nombre sp\u00e9cifique de ressources. L'acc\u00e8s ne sera uniquement possible que par invitation, un formulaire d'inscription sera mis \u00e0 disposition pour permettre \u00e0 n'importe qui de demander un acc\u00e8s sur notre page d'accueil finale.</p> <p>Ce qui est ou sera rendu open source :</p> <ul> <li>cette documentation</li> <li>les sch\u00e9mas de notre langage</li> <li>le code source de l'extension Visual Studio Code</li> </ul>"},{"location":"fr/roadmap/#beta","title":"beta","text":"<p>Cette phase sera consacr\u00e9e \u00e0 la stabilisation de l'ensemble des fonctionnalit\u00e9s existantes et \u00e0 l'ajout de nouvelles fonctionnalit\u00e9s.</p> <p>Parmi les fonctionnalit\u00e9s \u00e0 venir qui offriront un nouveau niveau de possibilit\u00e9s, nous avons :</p> <ul> <li>les Migrations qui permettront de faciliter le changement de structure de donn\u00e9es entre les diff\u00e9rentes versions de votre application</li> <li>les Syntaxes qui permettront de d\u00e9composer n'importe quel texte</li> <li>les Connecteurs qui permettront de connecter votre application \u00e0 n'importe quel service tiers par le biais d'API</li> <li>... et tous les autres Concepts poss\u00e9dant la mention \"beta\" dans la documentation</li> </ul> <p>L'utilisation de Visual Studio Code sera toujours possible mais nous allons \u00e9galement proposer un \u00e9diteur web pour ceux qui ne souhaitent rien installer sur leur machine. Nous allons \u00e9galement proposer un \u00e9diteur mobile (web, Android et iOS) pour ceux qui souhaitent cr\u00e9er des applications sur leur t\u00e9l\u00e9phone. Enfin, une version bureau (Linux, Windows et MacOS) pourra aussi \u00eatre propos\u00e9e pour ne pas avoir \u00e0 passer par un navigateur.</p> <p>L'acc\u00e8s \u00e0 dropin.cloud sera possible sans invitation et une conservation d'une version gratuite avec un nombre limit\u00e9 de ressources sera toujours disponible. Les utilisateurs pourront \u00e9galement choisir de passer \u00e0 un abonnement payant pour b\u00e9n\u00e9ficier d'un nombre illimit\u00e9 de ressources ainsi que l'acc\u00e8s \u00e0 un support technique avanc\u00e9. Nous communiquerons plus en d\u00e9tail sur les tarifs et les fonctionnalit\u00e9s de l'abonnement payant avant la sortie de la version beta.</p> <p>En plus de ce qui est open source la version alpha, le code source du compilateur de notre language sera aussi disponible publiquement. Les seuls services qui ne seront pas open source seront ceux int\u00e9gr\u00e9s \u00e0 dropin.cloud et qui n\u00e9cessitant la cr\u00e9ation d'un compte pour pouvoir les utiliser.</p>"},{"location":"fr/roadmap/#stable","title":"stable","text":"<p>Cette derni\u00e8re phase permettra de stabiliser l'ensemble des fonctionnalit\u00e9s en verrouillant les sp\u00e9cifications de drop'in tout en s'assurant que l'ensemble des fonctionnalit\u00e9s soient op\u00e9rationnelles et enti\u00e8rement test\u00e9es.</p> <p>Par ailleurs, de nouvelles fonctionnalit\u00e9s seront ajout\u00e9es pour permettre de cr\u00e9er des applications plus complexes. Parmi celles-ci, nous avons :</p> <ul> <li>les Conteneurs qui permettront de d\u00e9crire le fonctionnement de n'importe quelle application conteneuris\u00e9e</li> <li>les D\u00e9p\u00f4ts qui permettront de lier un d\u00e9p\u00f4t de code Git \u00e0 un Conteneur</li> <li>les D\u00e9ploiements qui permettront de d\u00e9ployer un Conteneur sur dropin.cloud</li> <li>les Bases de donn\u00e9es qui permettront d'utiliser une base de donn\u00e9es sp\u00e9cifique pour l'utiliser dans une Fonction</li> <li>... et tous les autres Concepts poss\u00e9dant la mention \"stable\" dans la documentation</li> </ul> <p>Il est essentiel pour nous de pouvoir garantir une stabilit\u00e9 et une s\u00e9curit\u00e9 maximale pour nos utilisateurs. Nous avons donc d\u00e9cid\u00e9 de ne pas proposer de version stable tant que nous n'aurons pas atteint cet objectif.</p>"},{"location":"fr/concepts/","title":"Concepts","text":"<p>Un Concept drop'in est la repr\u00e9sentation d'un ensemble de fonctionnalit\u00e9s qui permettent de d\u00e9crire un besoin sp\u00e9cifique. En d'autres termes, nous avons cr\u00e9\u00e9 un Concept pour chaque aspect dont vous pourriez avoir besoin dans le cadre de la cr\u00e9ation d'une application.</p> <p>Vous trouverez dans cette section l'ensemble des Concepts disponibles sur drop'in r\u00e9partis sur 10 grandes cat\u00e9gories :</p> <ul> <li>Recettes : met en avant les Concepts communs \u00e0 toutes les Recettes</li> <li>Propri\u00e9taires : met en avant les Concepts li\u00e9s aux Utilisateurs et aux Organisations inscrits sur drop'in</li> <li>8 cat\u00e9gories de Recettes possibles</li> </ul> <p>Pour chaque Concept, vous trouverez une description de son fonctionnement ainsi que des exemples d'utilisation dans la version finale de la documentation.</p> <p>Par ailleurs, gr\u00e2ce \u00e0 notre outil Studio vous pourrez d\u00e9crire votre application sans avoir \u00e0 \u00e9crire du code ou \u00e0 conna\u00eetre toutes les sp\u00e9cifications des Recettes car tous les Concepts drop'in sont accessibles via une interface graphique.</p>"},{"location":"fr/concepts/auth/","title":"Authentification","text":"<p>L'Authentification permet aux Propri\u00e9taires de s'identifier et d'\u00eatre attribu\u00e9s \u00e0 des acc\u00e8s sp\u00e9cifiques.</p>"},{"location":"fr/concepts/auth/groups/","title":"Groupes","text":"<p>Les Groupes d\u00e9crivent les acc\u00e8s d'un Utilisateur sur les ressources d'un Propri\u00e9taire comme par exemple :</p> <ul> <li>les acc\u00e8s \u00e0 une Organisation (administration, facturation, acc\u00e8s, Jetons, Royaumes, Paiements, ...)</li> <li>des Mod\u00e8les (cr\u00e9ation, modification, suppression, ...)</li> <li>les Projets en pr\u00e9cisant pour chaque les Permissions \u00e0 utiliser</li> </ul> <p>Une fois cr\u00e9\u00e9, un Groupe peut \u00eatre attribu\u00e9 \u00e0 des Utilisateurs. Il est m\u00eame possible d'assigner des conditions suppl\u00e9mentaires permettant de cr\u00e9er des sous-groupes.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/auth/permissions/","title":"Permissions","text":"<p>Les Permissions d\u00e9crivent les acc\u00e8s d'un Utilisateur aux ressources d'un Mod\u00e8le.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/auth/realms/","title":"Royaumes","text":"<p>Un Royaume permet aux Organisations l'inscription d'Utilisateurs gr\u00e2ce \u00e0 une combinaison d'adresses e-mail et d'un mot de passe.</p> <p>Quand un Utilisateurs s'inscrit sur dropin.cloud, il utilise le Royaume drop'in. Quand un Utilisateur s'inscrit sur un Projet ou une Organisation qui utilise les fonctionnalit\u00e9s d'authentification de drop'in, il utilise le Royaume d\u00e9fini par celle-ci.</p> <p>Une Organisation peut configurer un Royaume pour limiter \u00e0 une seule adresse e-mail les comptes des Utilisateurs ou laisser la possibilit\u00e9 d'en utiliser plusieurs.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/auth/tokens/","title":"Jetons","text":"<p>Un Jeton est une cha\u00eene de caract\u00e8res au format JWT permettant l'identification et la v\u00e9rification des niveaux d'acc\u00e8s d'un Utilisateur ou d'une Organisation.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/automations/","title":"Automatisations","text":"<p>Les Automatisations permettent l'ex\u00e9cution automatique de logiques.</p>"},{"location":"fr/concepts/automations/#apercu-de-studio-dropincloud","title":"Aper\u00e7u de Studio (dropin.cloud)","text":"<p>Voici un aper\u00e7u de l'interface de Studio pour la gestion des Fonctions :</p> <p></p>"},{"location":"fr/concepts/automations/deployments/","title":"D\u00e9ploiements","text":"<p>Les D\u00e9ploiements permettent l'ex\u00e9cution d'un Conteneur.</p> <p>Sont d\u00e9crits :</p> <ul> <li>les variables d'environnement \u00e0 utiliser</li> <li>les ports \u00e0 rediriger par un Domaine</li> <li>les ports accessibles par d'autres D\u00e9ploiements</li> <li>les ressources maximales \u00e0 utiliser (m\u00e9moire et processeur)</li> <li>les Volumes \u00e0 utiliser</li> </ul>","tags":["cloud","stable"]},{"location":"fr/concepts/automations/functions/","title":"Fonctions","text":"<p>Les Fonctions permettent de d\u00e9crire un ensemble d'Actions \u00e0 effectuer qui peuvent \u00eatre ex\u00e9cut\u00e9es lorsqu'un D\u00e9clencheur est activ\u00e9 ou par appel d'un Composant ou d'une autre Fonction.</p>","tags":["alpha"]},{"location":"fr/concepts/automations/functions/#actions","title":"Actions","text":"","tags":["alpha"]},{"location":"fr/concepts/automations/functions/#generales","title":"G\u00e9n\u00e9rales","text":"<ul> <li>connecteur : communication avec une service externe (API) via un Connecteur et ses Options</li> <li>collection : effectue une op\u00e9ration de lecture ou d'\u00e9criture sur une Collection</li> <li>recherche : parcours une donn\u00e9e pour extraire des informations</li> <li>fonction : appel d'une autre Fonction avec ses Options</li> <li>cryptographie : g\u00e9n\u00e8re des cl\u00e9s de cryptage (bcrypt, JWT, UUID, RSA, ...)</li> <li>e-mail : permet un envoi manuel de messages</li> <li>page : permet de simuler la navigation sur une Page</li> <li>transformation : permet de passer d'un texte \u00e0 en un objet via une Syntaxe</li> <li>base de donn\u00e9es : effectue des lectures ou des \u00e9critures avec une requ\u00eate sur une Base de donn\u00e9es</li> </ul>","tags":["alpha"]},{"location":"fr/concepts/automations/functions/#uniquement-accessibles-depuis-un-composant","title":"Uniquement accessibles depuis un Composant","text":"<ul> <li>session : permet de g\u00e9rer une Session</li> <li>navigation : permet de manipuler l'historique des Pages</li> <li>imprimer : si disponible, d\u00e9clenche une impression</li> <li>notification : permet de g\u00e9rer les notifications de l'appareil</li> <li>vibrer : si disponible, faire vibrer l'appareil</li> <li>presse-papiers : permet de g\u00e9rer la copie et le collage</li> </ul>","tags":["alpha"]},{"location":"fr/concepts/automations/functions/#uniquement-dans-les-iterations-et-les-intervalles","title":"Uniquement dans les it\u00e9rations et les intervalles","text":"<ul> <li>continuer (continue)</li> <li>sortir (break)</li> </ul>","tags":["alpha"]},{"location":"fr/concepts/automations/functions/#manipulateurs","title":"Manipulateurs","text":"<ul> <li>assignation : valeur \u00e0 d\u00e9finir, nouvelle valeur</li> <li>suppression : valeur \u00e0 supprimer</li> <li>condition : d\u00e9clencheur, alors Actions, sinon Actions</li> <li>it\u00e9ration (iterate) : liste ou objet, Actions</li> <li>intervalle (range) : valeur de d\u00e9but, valeur de fin, d\u00e9calages (quantit\u00e9s, jours, \u2026), Actions</li> <li>tant que (while) : condition, Actions</li> <li>cas : valeur \u00e0 tester, Actions pour chaque combinaison possible</li> <li>contrainte : condition, Anomalie \u00e0 d\u00e9clencher</li> </ul>","tags":["alpha"]},{"location":"fr/concepts/automations/migrations/","title":"Migrations","text":"<p>Les Migrations d\u00e9finissent les op\u00e9rations \u00e0 effectuer en cas de modification du Format des Collections.</p> <p>Il sera possible d'appliquer une Migration lors de la mise \u00e0 jour du Mod\u00e8le d'un Projet.</p>","tags":["cloud","beta"]},{"location":"fr/concepts/automations/triggers/","title":"D\u00e9clencheurs","text":"<p>Les D\u00e9clencheurs permettent l'ex\u00e9cution de Fonctions bas\u00e9 sur des crit\u00e8res sp\u00e9cifiques :</p> <ul> <li>attente d'une requ\u00eate depuis un Domaine (HTTP, WebSocket)</li> <li>r\u00e9gularit\u00e9 temporelle (CRON)</li> </ul>","tags":["cloud","alpha"]},{"location":"fr/concepts/catalog/","title":"Catalogue","text":"<p>Le Catalogue drop'in est un service dropin.cloud qui vous permettra de d\u00e9couvrir des Mod\u00e8les et des Projets cr\u00e9\u00e9s par la communaut\u00e9.</p> <p>Un syst\u00e8me de points sera mis en place pour r\u00e9compenser les \u00e9l\u00e9ments les plus populaires et les contributeurs les plus actifs.</p> <p>Des \u00e9l\u00e9ments payants pourraient \u00e9galement \u00eatre disponibles \u00e0 l'avenir, bas\u00e9s sur un mod\u00e8le d'abonnement ou par paiement unique. \u00c9videmment, seules les organisations certifi\u00e9es pourront publier ce type d'\u00e9l\u00e9ments pour \u00e9viter tout abus \u00e9ventuel de tarification.</p>"},{"location":"fr/concepts/catalog/models/","title":"Mod\u00e8les","text":"<p>Un Mod\u00e8le est un regroupement de Recettes avec un syst\u00e8me de Versions.</p> <p>Les \u00e9l\u00e9ments renseign\u00e9s dans un Mod\u00e8le sont :</p> <ul> <li>une ic\u00f4ne et une description</li> <li>les Utilisateurs auteurs</li> <li>le Format de ses Options</li> <li>la configuration des h\u00f4tes utilis\u00e9s pour les Connecteurs</li> <li>les stades possibles pour une T\u00e2che de la Communaut\u00e9</li> </ul> <p>Chaque Version est isol\u00e9e des autres mais il est possible de faire des liens entre les Recettes.</p> <p>Les Recettes pouvant se trouver dans un Mod\u00e8le sont :</p> <ul> <li> <p>pour les Interfaces :</p> <ul> <li>les Composants</li> <li>les Styles</li> <li>les Pages</li> <li>les Sessions</li> </ul> </li> <li> <p>pour le Stockage :</p> <ul> <li>les Collections</li> <li>les M\u00e9triques</li> <li>les Journaux</li> <li>les Valeurs</li> </ul> </li> <li> <p>pour les Validations :</p> <ul> <li>les Types</li> <li>les Anomalies</li> <li>les Syntaxes</li> </ul> </li> <li> <p>pour l'Automatisation</p> <ul> <li>les Fonctions</li> <li>les D\u00e9clencheurs</li> <li>les Migrations</li> <li>les D\u00e9ploiements</li> </ul> </li> <li> <p>pour l'Authentification :</p> <ul> <li>les Permissions</li> </ul> </li> <li> <p>pour les Terminaisons :</p> <ul> <li>les Connecteurs</li> </ul> </li> <li> <p>pour l'\u00c9diteur :</p> <ul> <li>les Sections</li> <li>les Visualisations</li> <li>les Formulaires</li> <li>les Cartes</li> </ul> </li> </ul>","tags":["alpha"]},{"location":"fr/concepts/catalog/models/#apercu-de-studio-dropincloud","title":"Aper\u00e7u de Studio (dropin.cloud)","text":"<p>La version alpha de drop'in Studio sera bas\u00e9e sur l'\u00e9diteur Visual Studio Code avec lequel une extension a \u00e9t\u00e9 d\u00e9velopp\u00e9e. De cette mani\u00e8re, les fonctionnalit\u00e9s initiales comme le parcours de la structure des fichiers, la navigation entre les fichiers et le support du versionnement Git sont d\u00e9j\u00e0 disponibles.</p> <p>Voici un exemple d'une Recette de Mod\u00e8le dans Studio :</p> <p></p>","tags":["alpha"]},{"location":"fr/concepts/catalog/models/#schema","title":"Sch\u00e9ma","text":"<p>Aper\u00e7u</p> <p>Source</p>","tags":["alpha"]},{"location":"fr/concepts/catalog/projects/","title":"Projets","text":"<p>Un Projet est l'utilisation d'un Mod\u00e8le : il applique le contenu des Recettes d'un Mod\u00e8le pour fonctionner. Il est donc possible d'avoir un seul Mod\u00e8le et plusieurs Projets avec des Options sp\u00e9cifiques \u00e0 chaque environnement.</p> <p>Les \u00e9l\u00e9ments renseign\u00e9s dans un Projet sont :</p> <ul> <li>un Mod\u00e8le, sa Version et ses Options</li> <li>la configuration des h\u00f4tes utilis\u00e9s pour les Connecteurs</li> <li>des informations sp\u00e9cifiques \u00e0 chaque plateforme (web, Android, iOS, Linux, Windows, macOS)</li> </ul> <p>Lors de la mise \u00e0 jour d'un Mod\u00e8le, il sera possible de migrer manuellement ou automatiquement le Projet vers une nouvelle version.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/editor/","title":"\u00c9diteur","text":"<p>L'\u00c9diteur est un service dropin.cloud qui vous permettra de g\u00e9rer au quotidien une structure de donn\u00e9es bas\u00e9e sur les Recettes d'un Mod\u00e8le. C'est une forme de back-office automatiquement g\u00e9n\u00e9r\u00e9 \u00e0 partir des sp\u00e9cifications que vous avez d\u00e9finies dans votre Recettes.</p> <p>Pour utiliser l'\u00c9diteur, la premi\u00e8re chose que vous devez faire est de choisir l'un de vos Projets pour que ses Sections soient charg\u00e9es. Chaque Section d\u00e9crit le contenu des pages de l'\u00c9diteur avec un affichage en temps r\u00e9el de vos donn\u00e9es.</p> <p>En plus de la possibilit\u00e9 de g\u00e9rer vos donn\u00e9es, l'\u00c9diteur vous permettra de d\u00e9clencher des Actions qui auront pour effet l'ex\u00e9cution de Fonctions sp\u00e9cifiques, mais aussi de g\u00e9rer tous les Utilisateurs du Royaumes de votre Projet si vous en poss\u00e9dez un.</p>"},{"location":"fr/concepts/editor/#apercu-des-interfaces","title":"Aper\u00e7u des interfaces","text":"<p>Voici quelques exemples d'interfaces qui seront disponibles dans l'\u00c9diteur.</p> <p>L'esth\u00e9tique de ces interfaces n'est pas finalis\u00e9e et sera amen\u00e9e \u00e0 \u00e9norm\u00e9ment \u00e9voluer d'ici la sortie de la version alpha, elle est ici essentiellement con\u00e7ue pour mettre en avant les fonctionnalit\u00e9s de l'\u00c9diteur.</p> <p> </p> \u00c9dition d'un Item d'une Collection <p> </p>      Affichage d'une Collection <p> </p> Clic sur l'ent\u00eate d'une colonne <p> </p> Outil Colonnes <p> </p> Outil Filtres <p> </p> Outil Densit\u00e9 <p> </p> Outil Exportation"},{"location":"fr/concepts/editor/forms/","title":"Formulaires","text":"<p>Le Formulaires permettent de cr\u00e9er un questionnaire dynamique pouvant \u00e9voluer selon les r\u00e9ponses indiqu\u00e9es aux questions pr\u00e9c\u00e9dentes.</p>","tags":["cloud","beta"]},{"location":"fr/concepts/editor/maps/","title":"Cartes","text":"<p>Les Cartes permettent de mani\u00e8re interactive de naviguer sur des des adresses ou des donn\u00e9es de g\u00e9o-localisation.</p>","tags":["cloud","beta"]},{"location":"fr/concepts/editor/sections/","title":"Sections","text":"<p>Les Sections permettent d'ajouter \u00e0 l'\u00c9diteur la possibilit\u00e9 d'administrer des Items de Collections et d'acc\u00e9der \u00e0 des tableaux de bord personnalis\u00e9s.</p> <p>Les types de Section suivants seront disponibles :</p> <ul> <li>Visualisations</li> <li>Collections</li> <li>Utilisateurs d'un Royaume</li> </ul> <p>Afin d'afficher les Items d'une Collection, voici les modes qui seront possibles :</p> <ul> <li>Liste (aper\u00e7u des interfaces)</li> <li>Kanban</li> <li>Tableur</li> <li>Carte interactive (Google Maps ou OpenStreetMap)</li> </ul>","tags":["cloud","alpha"]},{"location":"fr/concepts/editor/visualizations/","title":"Visualisations","text":"<p>Les Visualisations permettent de cr\u00e9er une repr\u00e9sentation graphique interactive pour afficher un ensemble de donn\u00e9es.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/editor/visualizations/#apercu-des-interfaces","title":"Aper\u00e7u des interfaces","text":"Lignes Aires Barres Points Bulles Camembert Radar Radial Carte","tags":["cloud","alpha"]},{"location":"fr/concepts/endpoints/","title":"Terminaisons","text":"<p>Les Terminaisons permettent l'envoi et la r\u00e9ception de requ\u00eates avec des services externes.</p>"},{"location":"fr/concepts/endpoints/addresses/","title":"Adresses","text":"<p>Les Adresses permettent de stocker des IPs au format IPv4 et/ou IPv6.</p>","tags":["stable"]},{"location":"fr/concepts/endpoints/connectors/","title":"Connecteurs","text":"<p>Les Connecteurs permettent de d\u00e9finir les sp\u00e9cifications des communications avec des services externes.</p> <p>Il existe plusieurs types de requ\u00eates :</p> <ul> <li>HTTP (h\u00f4te, chemin, m\u00e9thode, ent\u00eates, param\u00e8tres, corps et r\u00e9ponses possibles)</li> <li>WebSocket (donn\u00e9es \u00e0 envoyer et \u00e0 recevoir)</li> </ul>","tags":["beta"]},{"location":"fr/concepts/endpoints/databases/","title":"Bases de donn\u00e9es","text":"<p>Les Bases de donn\u00e9es permettent de configurer des communications avec un syst\u00e8me de gestion de base de donn\u00e9es externe.</p> <p>Seraient compatibles \u00e0 terme :</p> <ul> <li>MongoDB</li> <li>MySQL et MariaDB</li> <li>PostgreSQL</li> <li>Prometheus</li> <li>Redis</li> <li>Cassandra</li> <li>ElasticSearch</li> <li>RethinkDB</li> <li>InfluxDB</li> <li>SQLite</li> <li>Neo4j</li> <li>CouchDB</li> <li>ArangoDB</li> </ul>","tags":["stable"]},{"location":"fr/concepts/endpoints/domains/","title":"Domaines","text":"<p>Les Domaines permettent de d\u00e9crire un routage effectu\u00e9 sur des Pages, des D\u00e9clencheurs et des D\u00e9ploiements.</p> <p>Il est possible de g\u00e9rer des pr\u00e9fixes et des sous-domaines pour organiser la structure de vos applications.</p> <p>Un Projet doit \u00eatre s\u00e9lectionn\u00e9 pour chaque routage.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/endpoints/providers/","title":"Fournisseurs","text":"<p>Les Fournisseurs permettent de d\u00e9finir une communication avec un gestionnaire de paquets.</p> <p>Seraient compatibles \u00e0 terme :</p> <ul> <li>containers (Docker Hub, \u2026)</li> <li>d\u00e9p\u00f4ts (GitHub, GitLab, \u2026)</li> <li>npm (JavaScript)</li> <li>pip (Python)</li> <li>helm (Kubernetes)</li> <li>arch (pacman)</li> <li>nix</li> <li>apt (Debian)</li> <li>yum (Red Hat)</li> <li>gem (Ruby)</li> <li>maven (Java)</li> <li>gradle (Java)</li> <li>composer (PHP)</li> <li>conan (C/C++)</li> <li>nuget (C#)</li> <li>dotnet</li> </ul>","tags":["cloud","stable"]},{"location":"fr/concepts/interfaces/","title":"Interfaces","text":"<p>Les Interfaces regroupent l'ensembles des ressources n\u00e9cessaires \u00e0 la conception d'exp\u00e9riences graphiques web, bureau et mobile.</p>"},{"location":"fr/concepts/interfaces/#apercu-de-studio-dropincloud","title":"Aper\u00e7u de Studio (dropin.cloud)","text":"<p>Voici un aper\u00e7u de l'interface de Studio pour la gestion des Composants. Vous remarquerez l'absence le certains Blocs, nous avons r\u00e9cemment migr\u00e9 vers une nouvelle version de notre moteur de rendu et nous avons encore quelques uns \u00e0 migrer.</p> <p></p> <p></p>"},{"location":"fr/concepts/interfaces/components/","title":"Composants","text":"<p>Les Composants permettent de cr\u00e9er une interface graphique d\u00e9compos\u00e9e en \u00e9l\u00e9ments r\u00e9utilisables et imbriquables. L'ensemble du contenu d'un Composant est d\u00e9fini par des Blocs qui sont d\u00e9coup\u00e9es en deux cat\u00e9gories : les Blocs statiques et les Blocs dynamiques.</p>","tags":["alpha"]},{"location":"fr/concepts/interfaces/components/#blocs","title":"Blocs","text":"<p>Chaque Bloc poss\u00e8de des Options qui permettent de d\u00e9finir son comportement. Il est par exemple possible de d\u00e9finir le d\u00e9clenchement d'une Fonction lors d'un appui sur un Bloc, ou encore en tant que condition pour d\u00e9terminer si un Bloc doit \u00eatre affich\u00e9 ou non.</p> <p>Les Blocs peuvent aussi \u00eatre li\u00e9s \u00e0 des Styles qui permettent de d\u00e9finir leur apparence. L'application d'un Style peut \u00eatre conditionn\u00e9 par une condition ex\u00e9cut\u00e9e par une Fonction.</p>","tags":["alpha"]},{"location":"fr/concepts/interfaces/components/#blocs-statiques","title":"Blocs statiques","text":"<ul> <li>Zone : permet le regroupement Blocs</li> <li>Texte : affiche du texte potentiellement dans plusieurs langues</li> <li>Image :\u00a0affiche une image contenue dans un Volume ou depuis une URL externe</li> <li>Lien :\u00a0lien vers une Page ou une URL externe</li> <li>Bouton :\u00a0d\u00e9clenche une action lors d'un appui</li> <li>Saisie : entr\u00e9e d'une valeur par l'utilisateur</li> <li>Case \u00e0 cocher : permet de d\u00e9finir un \u00e9tat binaire</li> <li>Vid\u00e9o :\u00a0affiche une vid\u00e9o contenue dans un Volume ou depuis une URL externe</li> <li>Diviseur :\u00a0s\u00e9pare dynamiquement deux Blocs horizontalement ou verticalement</li> <li>D\u00e9pla\u00e7able :\u00a0permet de d\u00e9placer ce Bloc dans un Emplacement</li> <li>Emplacement : regroupe des Blocs D\u00e9pla\u00e7ables</li> </ul>","tags":["alpha"]},{"location":"fr/concepts/interfaces/components/#blocs-dynamiques","title":"Blocs dynamiques","text":"<ul> <li>Composant : permet d'appeler une autre Recette Composant</li> <li>R\u00e9f\u00e9rence : permet d'afficher la valeur d'une Option d'un autre Bloc</li> <li>It\u00e9ration : permet d'afficher autant de Blocs qu'il y a d'\u00e9l\u00e9ments retourn\u00e9s par une Fonction</li> </ul>","tags":["alpha"]},{"location":"fr/concepts/interfaces/components/#schema","title":"Sch\u00e9ma","text":"<p>Aper\u00e7u</p> <p>Source</p>","tags":["alpha"]},{"location":"fr/concepts/interfaces/pages/","title":"Pages","text":"<p>Les Pages permettent de d\u00e9finir un Composant \u00e0 utiliser pour permettre une navigation sur mobile, bureau ou web par le biais d'un Domaine.</p> <p>La configuration des Pages d\u00e9pend de la plateforme sur laquelle elle devra appara\u00eetre :</p> <ul> <li>web : chemin d'acc\u00e8s avec d'\u00e9ventuels param\u00e8tres ({id})</li> <li>mobile et bureau : identifiant de l'application et URLs de deep linking</li> </ul>","tags":["cloud","alpha"]},{"location":"fr/concepts/interfaces/sessions/","title":"Sessions","text":"<p>Les Sessions permettent de communiquer avec le syst\u00e8me de stockage local lors de l'affichage d'une Page.</p> <p>Sur chaque plateforme, des syst\u00e8mes diff\u00e9rents peuvent \u00eatre d\u00e9finis comme par exemple sur le web o\u00f9 vous pourrez utiliser sp\u00e9cifiquement les cookies ou IndexedDB.</p>","tags":["alpha"]},{"location":"fr/concepts/interfaces/styles/","title":"Styles","text":"<p>Les Styles permettent d'appliquer des r\u00e8gles de disposition d'affichage des Blocs d'un Composant.</p> <p>Il existe plusieurs cat\u00e9gories de Styles :</p> <ul> <li>Dimensions :\u00a0taille d'un Bloc</li> <li>Position :\u00a0positionnement d'un Bloc</li> <li>Marges :\u00a0espacements entre un Bloc et ses voisins</li> <li>Goutti\u00e8res :\u00a0espacements \u00e0 l'int\u00e9rieur d'un Bloc</li> <li>Fonds : style de fond d'un Bloc</li> <li>Bords : style des bords d'un Bloc</li> <li>Ombres :\u00a0ombre port\u00e9e d'un Bloc</li> <li>Texte :\u00a0li\u00e9 au Bloc Texte</li> <li>Zone :\u00a0li\u00e9 au Bloc Zone</li> <li>Saisie :\u00a0li\u00e9 au Bloc Saisie</li> </ul> <p>Un Style est d\u00e9compos\u00e9 en plusieurs Classes qui portent toutes un nom unique. Chaque Classe peut \u00eatre appliqu\u00e9e \u00e0 n'importe quel Bloc.</p> <p>Il est possible de cr\u00e9er des Classes conditionnelles afin d'appliquer des Styles en fonction de conditions bas\u00e9es sur :</p> <ul> <li>la plateforme (web, Android, iOS, linux, windows, macOS)</li> <li>les dimensions (longueur et largeur)</li> <li>des \u00e9tats (survol, focus, impression)</li> </ul> <p>Enfin, il est possible de cr\u00e9er des animations afin d'appliquer des trames de styles sur un Bloc avec une dur\u00e9e et une fr\u00e9quence d\u00e9finies.</p>","tags":["alpha"]},{"location":"fr/concepts/interfaces/styles/#schema","title":"Sch\u00e9ma","text":"<p>Aper\u00e7u</p> <p>Source</p>","tags":["alpha"]},{"location":"fr/concepts/interfaces/themes/","title":"Th\u00e8mes","text":"<p>Les Th\u00e8mes permettent de d\u00e9finir une charte graphique avec des couleurs, des tailles, des polices et des Styles globaux.</p>","tags":["alpha"]},{"location":"fr/concepts/owners/","title":"Propri\u00e9taires","text":"<p>Les Propri\u00e9taires peuvent :</p> <ul> <li>acc\u00e9der \u00e0 un Projet issu d'un Mod\u00e8le</li> <li>\u00e9diter les Recettes d'un Mod\u00e8le</li> </ul> <p>Les Recettes pouvant se trouver au niveau d'un Propri\u00e9taire sont :</p> <ul> <li> <p>pour le Catalogue :</p> <ul> <li>les Mod\u00e8les</li> <li>les Projets</li> </ul> </li> <li> <p>pour les Interfaces :</p> <ul> <li>les Th\u00e8mes</li> </ul> </li> <li> <p>pour le Stockage :</p> <ul> <li>les Volumes</li> <li>les D\u00e9p\u00f4ts</li> <li>les Conteneurs</li> </ul> </li> <li> <p>pour l'Authentification :</p> <ul> <li>les Royaumes</li> <li>les Groupes</li> </ul> </li> <li> <p>pour les Terminaisons :</p> <ul> <li>les Domaines</li> <li>les Adresses</li> <li>les Fournisseurs</li> <li>les Bases de donn\u00e9es</li> </ul> </li> </ul>"},{"location":"fr/concepts/owners/organizations/","title":"Organisations","text":"<p>Les Organisations sont cr\u00e9\u00e9es et poss\u00e9d\u00e9es par des Utilisateurs.</p> <p>Contrairement aux Utilisateurs, les Organisations ne poss\u00e8dent pas la possibilit\u00e9 de s'authentifier sur les interfaces drop'in. De ce fait, l'ensemble des \u00e9changes effectu\u00e9s par API doivent utiliser des Jetons manuellement g\u00e9n\u00e9r\u00e9s.</p> <p>Une autre diff\u00e9rence avec les Utilisateurs est qu'une Organisation peut cr\u00e9er des Royaumes pour permettre l'inscription d'Utilisateurs, et des Paiements pour effectuer des transactions bancaires.</p> <p>Les Paiements permettent d'utiliser via des Composants la carte bancaire d'un Utilisateur dans le carde d'un Projet.</p>","tags":["cloud","beta"]},{"location":"fr/concepts/owners/users/","title":"Utilisateurs","text":"<p>Un Utilisateur est un individu inscrit aupr\u00e8s d'un ou de plusieurs Royaumes. Il poss\u00e8de obligatoirement au moins une adresse e-mail et un mot de passe.</p> <p>Chaque Utilisateur a des donn\u00e9es de compte (informations personnelles, pr\u00e9f\u00e9rences, mots de passe). Les Royaumes \u00e9tant isol\u00e9s, ces donn\u00e9es sont sp\u00e9cifiques \u00e0 chaque Royaume d'inscription. Seules les adresse e-mails peuvent \u00eatres partag\u00e9es.</p> <p>Un Utilisateur ne peut pas utiliser les Royaumes ou les Paiements sans passer par une Organisation.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/recipes/","title":"Recettes","text":"<p>Une Recette est la description d'une entit\u00e9, d'un \u00e9tat ou d'un comportement.</p> <p>drop'in permet l'\u00e9criture de 32 types de Recettes diff\u00e9rentes ayant chacune un r\u00f4le sp\u00e9cifique.</p> <p>Il existe deux types de Recettes :</p> <ul> <li> <p>celles qui sont directement li\u00e9es \u00e0 un Propri\u00e9taire comme par exemple les Groupes, les Volumes, ou encore les Domaines</p> </li> <li> <p>celles se trouvant dans un Mod\u00e8le (par exemple les Composants, les Fonctions ou encore les Collections) et peuvent \u00eatre utilis\u00e9es pour cr\u00e9er des Projets ou \u00eatre partag\u00e9es avec d'autres utilisateurs via le Catalogue.</p> </li> </ul> <p>Vous pourrez par ailleurs trouver dans cette section des Concepts</p>"},{"location":"fr/concepts/recipes/#categories","title":"Cat\u00e9gories","text":"<ul> <li>Catalogue : gestion des Mod\u00e8les et des Projets</li> <li>Interfaces : cr\u00e9ation d'exp\u00e9riences graphiques</li> <li>Stockage : gestion de la persistance d'informations format\u00e9es</li> <li>Automatisations : actions automatis\u00e9es</li> <li>Validations : v\u00e9rification de la conformit\u00e9 de donn\u00e9es</li> <li>Authentification : gestion des acc\u00e8s des Utilisateurs</li> <li>Terminaisons : connexion \u00e0 des services externes</li> <li>\u00c9diteur : outil d'administration des Projets</li> </ul>"},{"location":"fr/concepts/recipes/#donnees-dentete","title":"Donn\u00e9es d'ent\u00eate","text":"<ul> <li>nom</li> <li>description</li> <li>termes, permet de d\u00e9finir le nom de la Recette pour qualifier une entit\u00e9 unique et pour plusieurs entit\u00e9s</li> <li>labels, mots permettant de cr\u00e9er des filtres pour s\u00e9lectionner un ensemble de Recettes</li> </ul>"},{"location":"fr/concepts/recipes/formats/","title":"Formats","text":"<p>Les Formats sont des d\u00e9finitions de structure de donn\u00e9es et peuvent \u00eatre compos\u00e9s de :</p> <ul> <li>Types natifs uniques et compos\u00e9s d'autres Formats</li> <li>Types personnalis\u00e9s cr\u00e9\u00e9s par les Propri\u00e9taires contenant d'autres Formats</li> </ul> <p>Les Formats sont par exemple utilis\u00e9s :</p> <ul> <li>dans les Options des Recettes</li> <li>dans les Variations des Types</li> <li>dans les Champs des Collections</li> <li>dans le D\u00e9finisseur \"comparaison des Formats\"</li> </ul> <p>Un Format de type natif objet peut contenir l'information de tous les champs obligatoires ainsi que les valeurs par d\u00e9faut \u00e0 utiliser.</p> <p>En utilisant un Format, il est possible de poser des Contraintes sur les donn\u00e9es manipul\u00e9es en donnant une condition de validit\u00e9 et une Anomalie. Si la condition n'est pas remplie, l'Anomalie est d\u00e9clench\u00e9e et renvoie des erreurs personnalis\u00e9es.</p> <p>Les Formats peuvent aussi contenir des Marqueurs afin d'appliquer des s\u00e9lections dynamiques avec par exemple la \u00c9tape \"recherche\" dans une Fonction.</p>"},{"location":"fr/concepts/recipes/formats/#types-natifs","title":"Types natifs","text":""},{"location":"fr/concepts/recipes/formats/#uniques","title":"Uniques","text":""},{"location":"fr/concepts/recipes/formats/#audio","title":"Audio","text":"<ul> <li>Options : Volume \u00e0 utiliser, tableaux d'extensions accept\u00e9es, taille min et max, dur\u00e9e min et max</li> <li>Format : Item de Fichier</li> </ul>"},{"location":"fr/concepts/recipes/formats/#binaire","title":"Binaire","text":"<ul> <li>Options : taille min et max</li> <li>Format : binaire</li> </ul>"},{"location":"fr/concepts/recipes/formats/#booleen","title":"Bool\u00e9en","text":"<ul> <li>Affichage : \u00e9diter la date de r\u00e9alisation</li> <li>Variations :<ul> <li>basique : bool\u00e9en</li> <li>t\u00e2che : objet avec un bool\u00e9en et deux date</li> </ul> </li> </ul>"},{"location":"fr/concepts/recipes/formats/#choix","title":"Choix","text":"<ul> <li>Options : choix min et max, possibilit\u00e9s avec leur description</li> <li>Format : liste de choix</li> </ul>"},{"location":"fr/concepts/recipes/formats/#couleur","title":"Couleur","text":"<ul> <li>Variations :<ul> <li>Hexad\u00e9cimal : objet avec texte et opacit\u00e9</li> <li>RGBA : objet avec des textes (rouge, vert, bleu et opacit\u00e9)</li> <li>HSLA : objet avec des textes</li> </ul> </li> </ul>"},{"location":"fr/concepts/recipes/formats/#date","title":"Date","text":"<ul> <li>Options : min et max</li> <li>Format : timestamp</li> <li>Affichage : unit\u00e9s (secondes, minutes, heures, jours, mois, ann\u00e9es)</li> </ul>"},{"location":"fr/concepts/recipes/formats/#duree","title":"Dur\u00e9e","text":"<ul> <li>Options : min et max</li> <li>Format : dur\u00e9e</li> <li>Affichage : unit\u00e9s (secondes, minutes, heures, jours, mois, ann\u00e9es)</li> </ul>"},{"location":"fr/concepts/recipes/formats/#e-mail","title":"E-mail","text":"<ul> <li>Options : nom de domaines \u00e0 utiliser, Expression R\u00e9guli\u00e8re sur le nom</li> <li>Format : texte</li> </ul>"},{"location":"fr/concepts/recipes/formats/#fichier","title":"Fichier","text":"<ul> <li>Options : Volume \u00e0 utiliser, tableaux d'extensions accept\u00e9es, taille min et max</li> <li>Format : Item de Fichier</li> </ul>"},{"location":"fr/concepts/recipes/formats/#image","title":"Image","text":"<ul> <li>Options : Volume \u00e0 utiliser, tableaux d'extensions accept\u00e9es, taille min et max, dimensions min et max</li> <li>Format : Item de Fichier</li> </ul>"},{"location":"fr/concepts/recipes/formats/#item","title":"Item","text":"<ul> <li>Options : Collection avec ses Options</li> <li>Format : Item d'Item</li> </ul>"},{"location":"fr/concepts/recipes/formats/#localisation","title":"Localisation","text":"<ul> <li>Options : pays inclus</li> <li>Format : objet</li> <li>Affichage : carte, champs (nom, nombre, rue, r\u00e9gion, ville, pays, code postal et coordonn\u00e9es GPS)</li> </ul>"},{"location":"fr/concepts/recipes/formats/#mesure","title":"Mesure","text":"<ul> <li>Options : d\u00e9cimales, min et max, table de conversions</li> <li>Affichage : unit\u00e9</li> <li>Format : objet avec quantit\u00e9 et unit\u00e9</li> </ul>"},{"location":"fr/concepts/recipes/formats/#periode","title":"P\u00e9riode","text":"<ul> <li>Options : dates min et max</li> <li>Format : objet avec deux dates</li> </ul>"},{"location":"fr/concepts/recipes/formats/#telephone","title":"T\u00e9l\u00e9phone","text":"<ul> <li>Options : liste de pr\u00e9fixes des pays accept\u00e9s</li> <li>Affichage : regroupement de nombres, s\u00e9parateur</li> <li>Format : objet avec pr\u00e9fixe et texte avec le num\u00e9ro</li> </ul>"},{"location":"fr/concepts/recipes/formats/#prix","title":"Prix","text":"<ul> <li>Options : min et max, liste des devises accept\u00e9es</li> <li>Affichage : devise</li> <li>Format : mesure avec devise</li> </ul>"},{"location":"fr/concepts/recipes/formats/#quantite","title":"Quantit\u00e9","text":"<ul> <li>Options : d\u00e9cimales, min et max</li> <li>Format : quantit\u00e9</li> </ul>"},{"location":"fr/concepts/recipes/formats/#recurrence","title":"R\u00e9currence","text":"<ul> <li>Format : p\u00e9riode et intervalle (secondes, minutes, heures, jours, mois, ann\u00e9es)</li> </ul>"},{"location":"fr/concepts/recipes/formats/#texte","title":"Texte","text":"<ul> <li>Options : taille min, taille max, Expression R\u00e9guli\u00e8re</li> <li>Variations :<ul> <li>texte</li> <li>par nombre : nom pour un, nom pour plusieurs, article si applicable</li> <li>par langue : pour chaque langue, un texte ou par nombre</li> </ul> </li> </ul>"},{"location":"fr/concepts/recipes/formats/#url","title":"URL","text":"<ul> <li>Format : texte</li> </ul>"},{"location":"fr/concepts/recipes/formats/#video","title":"Vid\u00e9o","text":"<ul> <li>Options : Volume \u00e0 utiliser, tableaux d'extensions accept\u00e9es, taille min et max, dimensions min et max</li> <li>Format : Item de Fichier</li> </ul>"},{"location":"fr/concepts/recipes/formats/#composes","title":"Compos\u00e9s","text":""},{"location":"fr/concepts/recipes/formats/#index","title":"Index","text":"<p>Cl\u00e9s dynamiques et Formats communs</p> <ul> <li>Options : liste de cl\u00e9s possibles</li> </ul>"},{"location":"fr/concepts/recipes/formats/#liste","title":"Liste","text":"<p>Ensemble ordonn\u00e9 d'un m\u00eame Format</p> <ul> <li>Options : taille min et max</li> </ul>"},{"location":"fr/concepts/recipes/formats/#objet","title":"Objet","text":"<p>Cl\u00e9s fixes et Formats individuels</p> <ul> <li>Options : objet avec champs requis et valeurs par d\u00e9faut</li> </ul>"},{"location":"fr/concepts/recipes/getters/","title":"R\u00e9cup\u00e9rateurs","text":"<p>Un R\u00e9cup\u00e9rateur permet d'acc\u00e9der \u00e0 une information dynamiquement.</p> <p>Il existe deux types d'acc\u00e8s :</p> <ul> <li> <p>locaux, il s'agit d'une information au niveau d'une Recette</p> </li> <li> <p>externe, il s'agit d'une information charg\u00e9 depuis une autre Recipe ou un Item de Collection</p> </li> </ul> <p>Dans un texte, il est possible d'utiliser un R\u00e9cup\u00e9rateur pour rendre un texte dynamique.</p>"},{"location":"fr/concepts/recipes/options/","title":"Options","text":"<p>Les Options permettent aux Recettes d'utiliser des param\u00e8tres personnalis\u00e9s quand elles fonctionnent.</p> <p>Dans chaque Recette, les Options attendues sont d\u00e9finies par un Format les rendant utilisables dans la Recette par le biais d'un R\u00e9cup\u00e9rateur.</p>"},{"location":"fr/concepts/recipes/setters/","title":"D\u00e9finisseurs","text":"<p>Les D\u00e9finisseurs permettent de d\u00e9terminer et transformer des donn\u00e9es.</p> <p>Dans les diff\u00e9rents D\u00e9finisseurs ci-dessous, les valeurs utilis\u00e9es sont :</p> <ul> <li>soit des donn\u00e9es brutes</li> <li>soit issues d'un R\u00e9cup\u00e9rateur</li> </ul> <p>Dans un texte, il est possible d'utiliser un D\u00e9finisseur pour rendre un texte dynamique.</p>"},{"location":"fr/concepts/recipes/setters/#operations","title":"Op\u00e9rations","text":""},{"location":"fr/concepts/recipes/setters/#arithmetique","title":"Arithm\u00e9tique","text":"<ul> <li>addition : liste de quantit\u00e9s</li> <li>soustraction : liste de quantit\u00e9s</li> <li>multiplication : liste de quantit\u00e9s</li> <li>division : liste de quantit\u00e9s</li> <li>puissance : quantit\u00e9</li> <li>racine carr\u00e9e : quantit\u00e9</li> <li>exponentielle : quantit\u00e9</li> <li>logarithme : quantit\u00e9</li> <li>modulo : deux quantit\u00e9s</li> </ul>"},{"location":"fr/concepts/recipes/setters/#logique","title":"Logique","text":"<ul> <li>existe : valeur</li> <li>et : liste de bool\u00e9ens</li> <li>ou : liste de bool\u00e9ens</li> <li>non : bool\u00e9en</li> </ul>"},{"location":"fr/concepts/recipes/setters/#comparaisons","title":"Comparaisons","text":"<ul> <li>moins que (&lt;) : deux quantit\u00e9s</li> <li>au plus (&lt;=) : deux quantit\u00e9s</li> <li>au moins (&gt;=) : deux quantit\u00e9s</li> <li>plus que (&gt;) : deux quantit\u00e9s</li> <li>\u00e9gal \u00e0 : deux quantit\u00e9s</li> <li>diff\u00e9rent de : deux quantit\u00e9s</li> <li>diff\u00e9rent de tous : une valeur, une liste de valeurs</li> <li>diff\u00e9rent d'un seul : une valeur, une liste de valeurs</li> <li>\u00e9gal \u00e0 tous : une valeur, une liste de valeurs</li> <li>\u00e9gal \u00e0 un seul : une valeur, une liste de valeurs</li> </ul>"},{"location":"fr/concepts/recipes/setters/#commun","title":"Commun","text":"<ul> <li>taille en caract\u00e8res d'une valeur ou d'\u00e9l\u00e9ments d'une liste (length) : valeur ou liste</li> <li>comparaison des Formats : valeur \u00e0 v\u00e9rifier, Format \u00e0 d\u00e9tecter</li> </ul>"},{"location":"fr/concepts/recipes/setters/#textes","title":"Textes","text":"<ul> <li>concat\u00e9ner : valeurs, texte s\u00e9parateur (\" \")</li> <li>d\u00e9couper : valeur, texte s\u00e9parateur</li> <li>chercher une cha\u00eene de caract\u00e8res (match) : texte dans lequel chercher, expression r\u00e9guli\u00e8re</li> <li>remplacer : texte dans lequel chercher, texte \u00e0 remplacer, texte de remplacement</li> <li>traduire : valeur, langue, nombre, article \u00e0 utiliser</li> <li>minuscule : texte</li> <li>majuscule : texte</li> <li>majuscules des premi\u00e8res lettres de chaque mot  (titleCase) : texte</li> <li>tronquer les espaces de d\u00e9but et de fin (trim) : texte, caract\u00e8res ([\"\"]), droite (true), gauche (true)</li> <li>abr\u00e9ger : texte, maximum, texte de fin (\"...\")</li> <li>transformation d'un texte avec une Syntaxe : texte, Syntaxe et ses Options</li> <li>s\u00e9lectionner une partie du texte : texte \u00e0 d\u00e9couper, d\u00e9but, fin</li> </ul>"},{"location":"fr/concepts/recipes/setters/#quantites","title":"Quantit\u00e9s","text":"<ul> <li>moyenne : liste de quantit\u00e9s</li> <li>arrondi : quantit\u00e9, nombre de d\u00e9cimales (2), type d'arrondi (au plus proche, inf\u00e9rieur ou sup\u00e9rieur)</li> </ul>"},{"location":"fr/concepts/recipes/setters/#dates","title":"Dates","text":"<ul> <li>dur\u00e9e entre deux dates : d\u00e9but, fin, unit\u00e9 de retour (\"s\")</li> <li>jour de la semaine d'une date : date</li> <li>extraction (jour, semaine, mois, ann\u00e9e, heures, ...) : date</li> <li>ajouter une p\u00e9riode \u00e0 une date : date, p\u00e9riode (jours, mois, ann\u00e9es, ...)</li> </ul>"},{"location":"fr/concepts/recipes/setters/#listes","title":"Listes","text":"<ul> <li>quantit\u00e9 maximale dans une liste : liste de quantit\u00e9s</li> <li>quantit\u00e9 minimale dans une liste : liste de quantit\u00e9s</li> <li>fusionner plusieurs listes : liste de listes</li> <li>s\u00e9lectionner des \u00e9l\u00e9ments : liste de valeurs, index de d\u00e9but, index de fin</li> </ul>"},{"location":"fr/concepts/recipes/setters/#valeurs","title":"Valeurs","text":"<ul> <li>nombre al\u00e9atoire : quantit\u00e9 minimale (0), quantit\u00e9 maximale (1), nombre de d\u00e9cimales (2)</li> <li>pi : nombre de d\u00e9cimales (15)</li> <li>date actuelle : variation de retour (\"timestamp\")</li> </ul>"},{"location":"fr/concepts/storage/","title":"Stockage","text":"<p>Le Stockage permet la conservation de donn\u00e9es sous diff\u00e9rentes formes textuelles et binaires.</p>"},{"location":"fr/concepts/storage/collections/","title":"Collections","text":"<p>Une Collection permet la conservation de donn\u00e9es d\u00e9crites avec des Champs.</p> <p>Les Champs sont d\u00e9finis par un Format.</p> <p>Une Collection contient des Items.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/storage/containers/","title":"Conteneurs","text":"<p>Les Conteneurs d\u00e9crivent le fonctionnement d'une image pour l'utiliser dans un D\u00e9ploiement.</p> <p>Sont d\u00e9crits :</p> <ul> <li>les proc\u00e9dures de fonctionnement n\u00e9cessaires</li> <li>les variables environnement disponibles</li> <li>les dossiers n\u00e9cessitant une persistance</li> <li>les ports disponibles</li> <li>les ressources recommand\u00e9es en m\u00e9moire et en processeur</li> </ul>","tags":["cloud","stable"]},{"location":"fr/concepts/storage/logs/","title":"Journalisation","text":"<p>La Journalisation permet de stocker des flux de sortie de programmes afin de conserver les traces de leur ex\u00e9cution.</p> <p>Ils peuvent par exemple \u00eatre utilis\u00e9s avec un D\u00e9ploiement pour conserver ses journaux.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/storage/metrics/","title":"M\u00e9triques","text":"<p>Les M\u00e9triques sont des nombres stock\u00e9es par rapport au temps afin de g\u00e9n\u00e9rer des statistiques chronologiques.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/storage/repositories/","title":"D\u00e9p\u00f4ts","text":"<p>Les D\u00e9p\u00f4ts permettent de stocker du code source avec un versionnement Git.</p>","tags":["cloud","stable"]},{"location":"fr/concepts/storage/values/","title":"Valeurs","text":"<p>Les Valeurs sont des donn\u00e9es brutes stock\u00e9es sous la forme de Recettes correspondant \u00e0 un Format sp\u00e9cifique.</p>","tags":["beta"]},{"location":"fr/concepts/storage/volumes/","title":"Volumes","text":"<p>Les Volumes permettent de stocker des fichiers statiques (images, vid\u00e9os...) au niveau d'un Propri\u00e9taire, il sera ensuite possible de d'utiliser ses Fichiers dans des Recettes.</p> <p>Pour cr\u00e9er un Volume, il faut indiquer un montant en Gigaoctet (Go) \u00e0 r\u00e9server.</p> <p>Les sauvegardes des Volumes est param\u00e9trable pour augmenter ou diminuer sa r\u00e9gularit\u00e9.</p>","tags":["cloud","alpha"]},{"location":"fr/concepts/validations/","title":"Validations","text":"<p>Les Validations permettent la v\u00e9rification de donn\u00e9es.</p>"},{"location":"fr/concepts/validations/issues/","title":"Anomalies","text":"<p>Les Anomalies d\u00e9crivent des erreurs potentielles utilisables dans des D\u00e9finisseurs, des Fonctions ou encore des Types.</p>","tags":["alpha"]},{"location":"fr/concepts/validations/syntaxes/","title":"Syntaxes","text":"<p>Les Syntaxes permettent d'effectuer une d\u00e9composition d'une donn\u00e9e textuelle via l'utilisation de Formats.</p>","tags":["beta"]},{"location":"fr/concepts/validations/types/","title":"Types","text":"<p>Les Types permettent d'enregistrer et de r\u00e9utiliser des Formats d\u00e9coup\u00e9s en Variations.</p> <p>En utilisant un Type dans une autre Recette, il est possible de tester le Format d'une donn\u00e9e avec des D\u00e9finisseurs et de d\u00e9clencher une Anomalie en cas d'erreur.</p>","tags":["alpha"]}]}