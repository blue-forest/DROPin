{"config":{"lang":["en","fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>drop'in is a technology for creating cross-platform applications (web, Android and iOS) based on a single code written in files called recipes. All aspects of your project are defined in recipes, from the graphical interface to the business logic and data management, so you don't need to know any programming language to create your application.</p> <p>Blue Forest, a French company based at Marseille, is currently developing this technology and uses drop'in to create applications for its clients. After many years of research and development, we believe that this technology can be useful to a larger number of organizations and individuals, so we decided to make it accessible to everyone. We have published this documentation to introduce the basic concepts of drop'in and to help you understand how you can use it to create your own applications.</p> <p>At the moment we are working on a free restricted version of drop'in that will soon be available under the name <code>alpha</code>. We invite you to fill out this form if you want to participate in this test phase. We will also publish more informations on this documentation as our work progresses. When the alpha period will end, we will release a <code>beta</code> version that will be accessible to everyone, and then a <code>stable</code> version that will be the final version of drop'in.</p> <p>drop'in is an open-source technology whose compiler will be released under the AGPL license, and we will also provide paid tools to facilitate the collaborative creation of your applications and their publication with the automation of deployment and update tasks. All its features are described in the <code>dropin.cloud</code> section of this documentation, so you will be able to easily identify which features will be free and which will be paid.</p> <p>If you have any questions, feel free to contact us by email at <code>dropin@blueforest.cc</code> or on GitHub in the <code>Discussions</code> section of our repository.</p>"},{"location":"#internationalization","title":"Internationalization","text":"<p>This documentation is also available in French. You can change the language of the documentation by using the language selector at the top right of the page, aside the search bar. If you want to contribute to the translation of this documentation, you can do it on GitHub by creating a Pull Request.</p>"},{"location":"#license","title":"License","text":"<p>The content of this repository is licensed under a CC BY-NC-SA 4.0 license, you may redistribute it and/or modify it under the terms of the license. Concerning the source code, it is licensed under the MIT license.</p>"},{"location":"cloud/","title":"dropin.cloud","text":"<p>dropin.cloud is a cloud service provided by Blue Forest to help you create and manage your applications based on the drop'in technology. It is currently in an alpha phase and is not yet accessible to everyone. If you want to participate in this test phase, you can fill out this form but be aware that the accesses will not be launched until we have finalized all the necessary preparations.</p> <p>dropin.cloud ecosystem will be composed of four main services:</p> <ul> <li>Studio: create your applications based on Models</li> <li>Editor: daily manage your data structure</li> <li>Catalog: a marketplace of drop'in Models and Projects</li> <li>Community: a place to share your creations and find inspiration</li> </ul>"},{"location":"cloud/#studio","title":"Studio","text":"<p>Studio allows you to describe a logical and visual behavior in the form of Models.</p> <p>For all Interfaces concepts, Studio will allow you to visualize in real time the changes you make to your application. Via an interactive editor, you can easily manage for example your Components and your Styles.</p> <p>For more algorithmic concepts, Studio will allow you to describe your application in the form of interactive blocks and assemble them to define for example your Functions.</p> <p>For each concept of a Model, Studio will allow you to describe your application without having to write a single line of code. However, if you want to go further, you can still edit the source code of your application directly from Studio.</p> <p>To see some examples of Studio interfaces, here are some pages to consult:</p> <ul> <li>Interfaces</li> <li>Automations</li> <li>Models</li> </ul>"},{"location":"cloud/#community","title":"Community","text":"<p>Here are some features that we have planned for this service:</p> <ul> <li>Publications: activity feed linked to the Fediverse with ActivityPub</li> <li>Messages: private messages between users encrypted end-to-end</li> <li>Manuals: write and share your documentations privately or publicly</li> <li>Translations: tool to easily translate your content</li> <li>Tasks: manage your projects with tasks and subtasks</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>The development of drop'in was divided into seasons and episodes : we have been going from version to version since 2016 and we are currently at episode 2 of season 6.</p> <p>During our journey we went through several technical stacks with a multitude of sandboxes which allowed us to progressively establish a set of features and define core concepts.</p> <p>In previous seasons, drop'in was used as part of Blue Forest's services to create cross-platform applications for its clients. Today, we have finalized the specifications of drop'in to make it available publicly allowing anyone to build their own applications in total autonomy.</p> <p>This documentation is in progress, we invite you to visit our GitHub repository to follow the next updates. Starting next episodes, we will post more details on this page.</p>"},{"location":"concepts/","title":"Concepts","text":"<p>A drop'in Concept is a set of features that allows you to describe a specific need. In other words, we have created a Concept for each aspect that you may need when creating an application.</p> <p>You will find all the Concepts available on drop'in in this section. For each Concept, you will find a description of its operation and examples of use.</p> <p>In addition, thanks to Studio you can describe your application without having to write code or know all the specifications of the Recipes because all drop'in Concepts are accessible via a graphical interface.</p>"},{"location":"concepts/auth/","title":"Auth","text":"<p>Auth allows the Owners to identify themselves and be assigned specific access.</p>"},{"location":"concepts/auth/groups/","title":"Groups","text":"<p>Groups describe the access of a User on the resources of an Owner such as:</p> <ul> <li>the access to an Organization (administration, billing, access, Tokens, Realms, Payments, ...)</li> <li>Models (creation, modification, deletion, ...)</li> <li>Projects by specifying for each the Permissions to use</li> </ul> <p>Once created, a Group can be assigned to Users. It is even possible to assign additional conditions to create sub-groups.</p>","tags":["cloud","alpha"]},{"location":"concepts/auth/permissions/","title":"Permissions","text":"<p>Permissions describe the access of a User to the resources of a Model.</p>","tags":["cloud","alpha"]},{"location":"concepts/auth/realms/","title":"Realms","text":"<p>A Realm allows Organizations to register Users through a combination of email addresses and a password.</p> <p>When a Users registers in dropin.cloud, they are using the drop'in Realm. When a User registers on a Project or an Organization that uses the authentication features of drop'in, he uses the Realm defined by it.</p> <p>An Organization may set up a Realm to restrict Users accounts to a single email address or allow the option of using multiple email addresses.</p>","tags":["cloud","alpha"]},{"location":"concepts/auth/tokens/","title":"Tokens","text":"<p>A Token is a string in JWT format allowing the identification and verification of the access levels of a User or an Organization.</p>","tags":["cloud","alpha"]},{"location":"concepts/automations/","title":"Automations","text":"<p>Automations allow the automatic execution of logic.</p>"},{"location":"concepts/automations/#studio-overview-dropincloud","title":"Studio overview (dropin.cloud)","text":"<p>Here is a preview of the Studio interface for managing Functions :</p>"},{"location":"concepts/automations/deployments/","title":"Deployments","text":"<p>Deployments allow the execution of a Container.</p> <p>Are described:</p> <ul> <li>the environment variables to use</li> <li>the ports to be redirected by a Domain</li> <li>the ports accessible by other Deployments</li> <li>maximum resources to use (memory and processor)</li> <li>the Volumes to use</li> </ul>","tags":["cloud","stable"]},{"location":"concepts/automations/functions/","title":"Functions","text":"<p>Functions are used to describe behavior in Steps when a Trigger is activated or when executed manually.</p>","tags":["alpha"]},{"location":"concepts/automations/functions/#steps","title":"Steps","text":"<p>A Step is a series of actions performed by Functions. The Steps are linked by a system of dependencies allowing to identify their execution order. The actions of a Step are executed successively.</p>","tags":["alpha"]},{"location":"concepts/automations/functions/#actions","title":"Actions","text":"<ul> <li>request: send a request to a server (HTTP, WebSocket, ...)</li> <li>lookup: browse a data with Manipulators to extract information</li> <li>parse: allows to pass from a text to an object via a Syntax</li> <li>cryptography: generates encryption keys (bcrypt, JWT, UUID, RSA, ...)</li> <li>collection: performs a read or write operation on a Collection</li> <li>function: call another Function with its Options</li> <li>connector: communication with an external service (API) via a Connector and its Options</li> <li>database: performs reads or writes with a query</li> <li>email: allows manual sending of messages</li> <li>page: allows to simulate the navigation on a Page</li> </ul>","tags":["alpha"]},{"location":"concepts/automations/migrations/","title":"Migrations","text":"<p>Migrations define the operations to perform in case of modification of the Format of Collections.</p> <p>It will be possible to apply a Migration during the update of the Model of a Project.</p>","tags":["cloud","beta"]},{"location":"concepts/automations/triggers/","title":"Triggers","text":"<p>Triggers allow the execution of Functions based on specific criterias:</p> <ul> <li>waiting for a request from a Domain (HTTP, WebSocket)</li> <li>time regularity (CRON)</li> </ul>","tags":["cloud","alpha"]},{"location":"concepts/catalog/","title":"Catalog","text":"<p>Get access to the drop'in Catalog from dropin.cloud and discover Models and Projects created by the community.</p> <p>A point system will be implemented to reward the most popular items and the most active contributors.</p> <p>Paid items could also be available in the future, based on a subscription model or a one-time payment. Obviously, only certified organizations will be able to publish that kind of items to avoid any potential pricing abuse.</p>"},{"location":"concepts/catalog/models/","title":"Models","text":"<p>A Model is a group of Recipes with a Versioning system.</p> <p>The elements defined in a Model are:</p> <ul> <li>an icon and a description</li> <li>the Users authors</li> <li>the Format of its Options</li> <li>the default configuration of the hosts used for the Connectors</li> <li>the stages possible for a Task of the Community</li> </ul> <p>Each Version is isolated from the others but it is possible to link Recipes between them.</p> <p>Recipes that can be found in a Model are :</p> <ul> <li> <p>for Interfaces :</p> <ul> <li>Components</li> <li>Styles</li> <li>Pages</li> <li>Sessions</li> </ul> </li> <li> <p>for Storage :</p> <ul> <li>Collections</li> <li>Metrics</li> <li>Logs</li> <li>Values</li> </ul> </li> <li> <p>for Validations :</p> <ul> <li>Types</li> <li>Anomalies</li> <li>Syntaxes</li> </ul> </li> <li> <p>for Automation</p> <ul> <li>Functions</li> <li>Triggers</li> <li>Migrations</li> <li>Deployments</li> </ul> </li> <li> <p>for Authentication :</p> <ul> <li>Permissions</li> </ul> </li> <li> <p>for Endpoints :</p> <ul> <li>Connectors</li> </ul> </li> <li> <p>for Editor :</p> <ul> <li>Sections</li> <li>Visualizations</li> <li>Forms</li> <li>Maps</li> </ul> </li> </ul>","tags":["alpha"]},{"location":"concepts/catalog/models/#studio-overview-dropincloud","title":"Studio overview (dropin.cloud)","text":"<p>The alpha version of drop'in Studio will be based on Visual Studio Code with which an extension has been developed. In this way, initial features like file structure browsing, file navigation and Git versioning support are already available.</p> <p>Here is an example of a Model Recipe in Studio :</p>","tags":["alpha"]},{"location":"concepts/catalog/models/#schema","title":"Schema","text":"<p>Overview</p> <p>Source</p>","tags":["alpha"]},{"location":"concepts/catalog/projects/","title":"Projects","text":"<p>A Project is the use of a Model : it applies the content of the Recipes of a Model to work. It is therefore possible to have a single Model and several Projects with specific Options for each environment.</p> <p>The elements specified in a Project are:</p> <ul> <li>a Model, its Version and its Options</li> <li>the configuration of the hosts used for Connectors</li> <li>platform-specific informations (web, Android, iOS, Linux, Windows, macOS)</li> </ul> <p>When updating a Model, it will be possible to manually or automatically migrate the Project to a new version.</p>","tags":["cloud","alpha"]},{"location":"concepts/editor/","title":"Editor","text":"<p>Editor is a dropin.cloud service that provide a daily management interface for a data structure based on the Recipes of a Model. This is a kind of back-office automatically generated from the specifications you defined in your Project.</p> <p>To use Editor, the first thing you need to do is to choose one of your Projects for its Sections to be loaded. Each Section describes the content of Editor pages with a real-time display of your data.</p> <p>In addition to the ability to manage your data, Editor will allow you to trigger Actions that will result in the execution of specific Functions, but also to manage all the Users of your Realm if you have one.</p>"},{"location":"concepts/editor/#interfaces-overview","title":"Interfaces overview","text":"<p>Here are some examples of interfaces that will be available in Editor.</p> <p>The aesthetics of these interfaces is not finalized and will be greatly evolving before the release of the alpha version, it is here essentially designed to highlight Editor features.</p> <p>The current shown interfaces are in French, but the final version will obviously be available in English.</p>        Edition of a Collection Item            View of a Collection     Click on a header column    Columns tool    Filters tool    Density tool    Export tool"},{"location":"concepts/editor/forms/","title":"Forms","text":"<p>Forms allow to create a dynamic questionnaire that can evolve according to the answers given to the previous questions.</p>","tags":["cloud","beta"]},{"location":"concepts/editor/maps/","title":"Maps","text":"<p>Maps allow to interactively navigate on addresses or geolocation data.</p>","tags":["cloud","beta"]},{"location":"concepts/editor/sections/","title":"Sections","text":"<p>Sections allow to add to the Editor the ability to manage Collection Items and access to custom dashboards.</p> <p>The following Section types will be available :</p> <ul> <li>Visualizations</li> <li>Collections</li> <li>Realm Users</li> </ul> <p>In order to display Collection Items, here are the modes that will be possible :</p> <ul> <li>List (interfaces preview)</li> <li>Kanban</li> <li>Spreadsheet</li> <li>Interactive map (Google Maps or OpenStreetMap)</li> </ul>","tags":["cloud","alpha"]},{"location":"concepts/editor/visualizations/","title":"Visualizations","text":"<p>Visualizations allow to create an interactive graphical representation to display a set of data.</p>","tags":["cloud","alpha"]},{"location":"concepts/editor/visualizations/#interfaces-overview","title":"Interfaces overview","text":"Lines    Areas    Bars    Dots    Bubbles","tags":["cloud","alpha"]},{"location":"concepts/endpoints/","title":"Endpoints","text":"<p>Endpoints allow receiving and sending requests from and to external services.</p>"},{"location":"concepts/endpoints/addresses/","title":"Addresses","text":"<p>Addresses allow to store IPs in IPv4 and/or IPv6 format.</p>","tags":["stable"]},{"location":"concepts/endpoints/connectors/","title":"Connectors","text":"<p>Connectors allow to define the specifications of communications with external services.</p> <p>There are several types of requests:</p> <ul> <li>HTTP (host, path, method, headers, parameters, body and possible responses)</li> <li>WebSocket (data to send and receive)</li> </ul>","tags":["beta"]},{"location":"concepts/endpoints/databases/","title":"Databases","text":"<p>Databases allow you to configure communications with an external database management system.</p> <p>Would be compatible in the long run:</p> <ul> <li>MongoDB</li> <li>MySQL and MariaDB</li> <li>PostgreSQL</li> <li>Prometheus</li> <li>Redis</li> <li>Cassandra</li> <li>ElasticSearch</li> <li>RethinkDB</li> <li>InfluxDB</li> <li>SQLite</li> <li>Neo4j</li> <li>CouchDB</li> <li>ArangoDB</li> </ul>","tags":["stable"]},{"location":"concepts/endpoints/domains/","title":"Domains","text":"<p>Domains allow you to describe a routing on Pages, Triggers and Deployments.</p> <p>It is possible to manage prefixes and subdomains to organize the structure of your applications.</p> <p>A Project must be provided for each routing.</p>","tags":["cloud","alpha"]},{"location":"concepts/endpoints/providers/","title":"Providers","text":"<p>Providers allow to define a communication with a package manager.</p> <p>Would be compatible in the long run:</p> <ul> <li>containers (Docker Hub, ...)</li> <li>repositories (GitHub, GitLab, ...)</li> <li>npm (JavaScript)</li> <li>pip (Python)</li> <li>helm (Kubernetes)</li> <li>arch (pacman)</li> <li>nix</li> <li>apt (Debian)</li> <li>yum (Red Hat)</li> <li>gem (Ruby)</li> <li>maven (Java)</li> <li>gradle (Java)</li> <li>composer (PHP)</li> <li>conan (C/C++)</li> <li>nuget (C#)</li> <li>dotnet</li> </ul>","tags":["cloud","stable"]},{"location":"concepts/interfaces/","title":"Interfaces","text":"<p>Interfaces include all the resources needed to design web, desktop and mobile graphic experiences.</p>"},{"location":"concepts/interfaces/#studio-overview-dropincloud","title":"Studio overview (dropin.cloud)","text":"<p>Here is a preview of the Studio interface for managing Components. You will notice that some Blocks are missing, we have recently migrated to a new version of our renderer and we still have some to migrate.</p>"},{"location":"concepts/interfaces/components/","title":"Components","text":"<p>Components allow you to create a graphical interface made up of reusable and nestable elements. The entire content of a Component is defined by Blocks that are divided into two categories: Static Blocks and Dynamic Blocks.</p>","tags":["alpha"]},{"location":"concepts/interfaces/components/#blocks","title":"Blocks","text":"<p>Each Block has Options that allow you to define its behavior. For example, it is possible to define the triggering of a Function when a Block is pressed, or as a condition to determine whether a Block should be displayed or not.</p> <p>Blocks can also be linked to Styles that allow you to define their appearance. Applying a Style can be conditioned by a condition executed by a Function.</p>","tags":["alpha"]},{"location":"concepts/interfaces/components/#static-blocks","title":"Static Blocks","text":"<ul> <li>Zone: allows grouping Blocks</li> <li>Text: displays text potentially in multiple languages</li> <li>Image: displays an image contained in a Volume or from an external URL</li> <li>Link: link to a Page or an external URL</li> <li>Button: triggers an action when pressed</li> <li>Input: user input</li> <li>Checkbox: allows you to define a binary state</li> <li>Video: displays a video contained in a Volume or from an external URL</li> <li>Divider: dynamically separates two Blocks horizontally or vertically</li> <li>Draggable: allows you to move this Block to a Droppable Block</li> <li>Droppable: groups Draggable Blocks</li> </ul>","tags":["alpha"]},{"location":"concepts/interfaces/components/#dynamic-blocks","title":"Dynamic Blocks","text":"<ul> <li>Component: allows you to call another Component Recipe</li> <li>Reference: allows you to display the value of an Option of another Block</li> <li>Iteration: allows you to display as many Blocks as there are elements returned by a Function</li> </ul>","tags":["alpha"]},{"location":"concepts/interfaces/components/#schema","title":"Schema","text":"<p>Overview</p> <p>Source</p>","tags":["alpha"]},{"location":"concepts/interfaces/pages/","title":"Pages","text":"<p>Pages allow you to define a Component to be used to enable mobile, desktop or web browsing through a Domain.</p> <p>The configuration of the Pages depends on the platform on which it will appear:</p> <ul> <li>web: path with possible parameters ({id})</li> <li>mobile and desktop: application id and deep linking URLs</li> </ul>","tags":["cloud","alpha"]},{"location":"concepts/interfaces/sessions/","title":"Sessions","text":"<p>Sessions allow communication with the local storage system when displaying a Page.</p> <p>On each platform, different systems can be defined as for example on the web where you can specifically use cookies or IndexedDB.</p>","tags":["alpha"]},{"location":"concepts/interfaces/styles/","title":"Styles","text":"<p>Styles allow you to apply display rules for the Blocks of a Component.</p> <p>There are several categories of Styles:</p> <ul> <li>Dimensions: size of a Block</li> <li>Position: positioning of a Block</li> <li>Margins: spacing between a Block and its neighbors</li> <li>Gutters: spacing inside a Block</li> <li>Background: background style of a Block</li> <li>Borders: border style of a Block</li> <li>Shadows: shadow of a Block</li> <li>Text: related to the Text Block</li> <li>Zone: related to the Zone Block</li> <li>Input: related to the Input Block</li> </ul> <p>A Style is decomposed into several Classes that all have a unique name. Each Class can be applied to any Block.</p> <p>It is possible to create conditional Classes in order to apply Styles depending on conditions based on: - the platform (web, Android, iOS, linux, windows, macOS) - the dimensions (height and width) - the state (hover, focus, print)</p> <p>Finally, it is possible to create animations in order to use styles frames on a Block with a defined duration and frequency.</p>","tags":["alpha"]},{"location":"concepts/interfaces/styles/#schema","title":"Schema","text":"<p>Overview</p> <p>Source</p>","tags":["alpha"]},{"location":"concepts/interfaces/themes/","title":"Themes","text":"<p>Themes allow you to define a graphic charter with colors, sizes, fonts and global Styles.</p>","tags":["alpha"]},{"location":"concepts/owners/","title":"Owners","text":"<p>Owners can:</p> <ul> <li>access a Project which is based on a Model</li> <li>edit Recipes from a Model</li> </ul> <p>Recipes that can be found at the Owner level are:</p> <ul> <li> <p>for the Catalog:</p> <ul> <li>Models</li> <li>Projects</li> </ul> </li> <li> <p>for Interfaces:</p> <ul> <li>Themes</li> </ul> </li> <li> <p>for Storage:</p> <ul> <li>Volumes</li> <li>Repositories</li> <li>Containers</li> </ul> </li> <li> <p>for Authentication:</p> <ul> <li>Realms</li> <li>Groups</li> </ul> </li> <li> <p>for Endpoints:</p> <ul> <li>Domains</li> <li>Addresses</li> <li>Providers</li> <li>Databases</li> </ul> </li> </ul>"},{"location":"concepts/owners/organizations/","title":"Organizations","text":"<p>Organizations are created and owned by Users.</p> <p>Unlike Users, Organizations do not have the ability to authenticate on drop'in interfaces. As a result, all exchanges via API must use manually generated Tokens.</p> <p>Another difference with Users is that an Organization can create Realms to allow the registration of Users, and Payments to make bank transactions.</p> <p>Payments allow you to use the credit card of a User via Components in the context of a Project.</p>","tags":["cloud","beta"]},{"location":"concepts/owners/users/","title":"Users","text":"<p>A User is an individual registered with one or more Realms. He or she must have at least one email address and a password.</p> <p>Each User has account data (personal information, preferences, passwords). Realms being isolated, this data is specific to each Realm of registration. Only email addresses can be shared.</p> <p>Users cannot use Realms or Payments without going through an Organization.</p>","tags":["cloud","alpha"]},{"location":"concepts/recipes/","title":"Recipes","text":"<p>A Recipe is the description of an entity, a state or a behavior.</p> <p>There are two types of Recipes:</p> <ul> <li> <p>those directly linked to an Owner such as Groups, Volumes, or Domains</p> </li> <li> <p>those found in a Model such as Components, Functions, or Collections</p> </li> </ul> <p>Only Recipes from Models can be used to create Projects or be shared with other users via the Catalog.</p>"},{"location":"concepts/recipes/#categories","title":"Categories","text":"<ul> <li>Catalog: management of Models and Projects</li> <li>Owners: management of Users and Organizations</li> <li>Interfaces: creating graphical experiences</li> <li>Storage: persistence of formatted data</li> <li>Automations: automated actions</li> <li>Validations: verification of data conformity</li> <li>Auth: management of Users accesses</li> <li>Endpoints: connection to external services</li> <li>Editor: Projects administration</li> </ul>"},{"location":"concepts/recipes/#header-data","title":"Header data","text":"<ul> <li>name</li> <li>description</li> <li>terms, to define the name of the Recipe to qualify a single entity and for several entities</li> <li>labels, words allowing to create filters to select a set of Recipes</li> </ul>"},{"location":"concepts/recipes/formats/","title":"Formats","text":"<p>Formats are data structure definitions and can be composed of:</p> <ul> <li>Unique native types composed of other Formats</li> <li>Custom types created by Owners containing other Formats</li> </ul> <p>Formats are for example used:</p> <ul> <li>in Options of Recipes</li> <li>in Variations of Types</li> <li>in Fields of Collections</li> <li>in Setter \"Format comparison\"</li> </ul> <p>A Format of native object type can contain the information of all required fields as well as default values to be used.</p> <p>When using a Format, it is possible to place Constraints on the manipulated data by giving a validity condition and an Issue. If the condition is not met, the Issue is triggered and returns custom errors.</p> <p>Formats can also contain Labels to apply dynamic selections with for example the \"search\" step in a Function.</p>"},{"location":"concepts/recipes/formats/#native-types","title":"Native types","text":""},{"location":"concepts/recipes/formats/#unique","title":"Unique","text":""},{"location":"concepts/recipes/formats/#audio","title":"Audio","text":"<ul> <li>Options: Volume to use, list of accepted extension, min and max size, min and max duration</li> <li>Format: File Item</li> </ul>"},{"location":"concepts/recipes/formats/#binary","title":"Binary","text":"<ul> <li>Options: min and max size</li> <li>Format: binary</li> </ul>"},{"location":"concepts/recipes/formats/#boolean","title":"Boolean","text":"<ul> <li>Display: edit date</li> <li>Variations:<ul> <li>basic: boolean</li> <li>task: object with one boolean and two dates</li> </ul> </li> </ul>"},{"location":"concepts/recipes/formats/#choice","title":"Choice","text":"<ul> <li>Options: min and max choices, possibilities with their description</li> <li>Format: list of choices</li> </ul>"},{"location":"concepts/recipes/formats/#color","title":"Color","text":"<ul> <li>Variations:<ul> <li>Hexadecimal: object with text and opacity</li> <li>RGBA: object with texts (red, green, blue and opacity)</li> <li>HSLA: object with texts</li> </ul> </li> </ul>"},{"location":"concepts/recipes/formats/#date","title":"Date","text":"<ul> <li>Options: min and max</li> <li>Format: timestamp</li> <li>Display : units (seconds, minutes, hours, days, months, years)</li> </ul>"},{"location":"concepts/recipes/formats/#duration","title":"Duration","text":"<ul> <li>Options: min and max</li> <li>Format: duration</li> <li>Display: units (seconds, minutes, hours, days, months, years)</li> </ul>"},{"location":"concepts/recipes/formats/#e-mail","title":"E-mail","text":"<ul> <li>Options: domain name to use, Regular expression on name</li> <li>Format: text</li> </ul>"},{"location":"concepts/recipes/formats/#file","title":"File","text":"<ul> <li>Options: Volume to use, accepted extension tables, min and max size</li> <li>Format: File Item</li> </ul>"},{"location":"concepts/recipes/formats/#image","title":"Image","text":"<ul> <li>Options: Volume to use, supported extension tables, min and max size, min and max dimensions</li> <li>Format: File Item</li> </ul>"},{"location":"concepts/recipes/formats/#item","title":"Item","text":"<ul> <li>Options: Collection with its Options</li> <li>Format: Item of Item</li> </ul>"},{"location":"concepts/recipes/formats/#location","title":"Location","text":"<ul> <li>Options: country included</li> <li>Format: object</li> <li>Display: map, fields (name, number, street, region, city, country, postal code and GPS coordinates)</li> </ul>"},{"location":"concepts/recipes/formats/#measure","title":"Measure","text":"<ul> <li>Options: decimals, min and max, conversion table</li> <li>Display: unit</li> <li>Format: object with quantity and unit</li> </ul>"},{"location":"concepts/recipes/formats/#period","title":"Period","text":"<ul> <li>Options: min and max dates</li> <li>Format: object with two dates</li> </ul>"},{"location":"concepts/recipes/formats/#telephone","title":"Telephone","text":"<ul> <li>Options: list of accepted country prefixes</li> <li>Display: grouping of numbers, separator</li> <li>Format: object with prefix and text with number</li> </ul>"},{"location":"concepts/recipes/formats/#price","title":"Price","text":"<ul> <li>Options: min and max, list of accepted currencies</li> <li>Display: currency</li> <li>Format: measure with currency</li> </ul>"},{"location":"concepts/recipes/formats/#quantity","title":"Quantity","text":"<ul> <li>Options: decimal, min and max</li> <li>Format: quantity</li> </ul>"},{"location":"concepts/recipes/formats/#recurrence","title":"Recurrence","text":"<ul> <li>Format: period and interval (seconds, minutes, hours, days, months, years)</li> </ul>"},{"location":"concepts/recipes/formats/#text","title":"Text","text":"<ul> <li>Options: min size, max size, Regular expression</li> <li>Variations:<ul> <li>text</li> <li>by number: name for one, name for many, article if applicable</li> <li>by language: for each language, a text or by number</li> </ul> </li> </ul>"},{"location":"concepts/recipes/formats/#url","title":"URL","text":"<ul> <li>Format: text</li> </ul>"},{"location":"concepts/recipes/formats/#video","title":"Video","text":"<ul> <li>Options: Volume to use, accepted extension tables, min and max size, min and max dimensions</li> <li>Format: File Item</li> </ul>"},{"location":"concepts/recipes/formats/#compounds","title":"Compounds","text":""},{"location":"concepts/recipes/formats/#index","title":"Index","text":"<p>Dynamic keys and common formats</p> <ul> <li>Options: list of possible keys</li> </ul>"},{"location":"concepts/recipes/formats/#list","title":"List","text":"<p>Ordered set of the same Format</p> <ul> <li>Options: min and max size</li> </ul>"},{"location":"concepts/recipes/formats/#object","title":"Object","text":"<p>Fixed keys and individual Formats</p> <ul> <li>Options: object with required fields and default values</li> </ul>"},{"location":"concepts/recipes/getters/","title":"Getters","text":"<p>A Getter allows to access information dynamically.</p> <p>There are two types of access:</p> <ul> <li> <p>local, it is information at the level of a Recipe</p> </li> <li> <p>external, it is information loaded from another Recipe or a Collection Item</p> </li> </ul> <p>In a text, it is possible to use a Getter to make a text dynamic.</p>"},{"location":"concepts/recipes/options/","title":"Options","text":"<p>Options allow Recipes to use custom parameters when they run.</p> <p>In each Recipe, the expected Options are defined by a Format making them usable in the Recipe through a Getter.</p>"},{"location":"concepts/recipes/setters/","title":"Setters","text":"<p>Setters are used to determine and transform data.</p> <p>In the different Setters below, the values used are:</p> <ul> <li>either raw data</li> <li>or from a Getter</li> </ul> <p>In a text, it is possible to use a Setter to make a text dynamic.</p>"},{"location":"concepts/recipes/setters/#operations","title":"Operations","text":""},{"location":"concepts/recipes/setters/#arithmetic","title":"Arithmetic","text":"<ul> <li>addition: list of quantities</li> <li>subtraction: list of quantities</li> <li>multiplication: list of quantities</li> <li>division: list of quantities</li> <li>power: quantity</li> <li>square root: quantity</li> <li>exponential: quantity</li> <li>logarithm: quantity</li> <li>modulo: two quantities</li> </ul>"},{"location":"concepts/recipes/setters/#logic","title":"Logic","text":"<ul> <li>exists: value</li> <li>and: list of booleans</li> <li>or: list of booleans</li> <li>no: boolean</li> </ul>"},{"location":"concepts/recipes/setters/#comparisons","title":"Comparisons","text":"<ul> <li>less than (&lt;): two quantities</li> <li>at most (&lt;=): two quantities</li> <li>at least ()&gt;=): two quantities</li> <li>more than (&gt;): two quantities</li> <li>equal to: two quantities</li> <li>different from: two quantities</li> <li>different from all: one value, a list of values</li> <li>different from one: one value, a list of values</li> <li>same to all: one value, a list of values</li> <li>same to one: a value, a list of values</li> </ul>"},{"location":"concepts/recipes/setters/#formats","title":"Formats","text":""},{"location":"concepts/recipes/setters/#common","title":"Common","text":"<ul> <li>length: size in characters of a value or elements of a list</li> <li>instance of: value to check, Format to use</li> </ul>"},{"location":"concepts/recipes/setters/#texts","title":"Texts","text":"<ul> <li>concatenate: values, separator text (\" \")</li> <li>split: value, separator text</li> <li>match: text to search, regular expression</li> <li>replace: text to search, text to replace, replacement text</li> <li>translate: value, language, number, item to use</li> <li>lowercase: text</li> <li>upper case: text</li> <li>capitalize first letters of each word (titleCase): text</li> <li>truncate leading and trailing spaces (trim): text, characters ([\"\"]), right (true), left (true)</li> <li>abbreviate (summarize): text, maximum, end text (\"...\")</li> <li>transform a text with a Syntax (encode): text, Syntax and its Options</li> <li>pick: select a part of the text to cut with the beginning and the end</li> </ul>"},{"location":"concepts/recipes/setters/#quantities","title":"Quantities","text":"<ul> <li>average: list of quantities</li> <li>rounding: quantity, number of decimals (2), type of rounding (nearest, lower or higher)</li> </ul>"},{"location":"concepts/recipes/setters/#dates","title":"Dates","text":"<ul> <li>duration between two dates: start, end, return unit (\"s\")</li> <li>day of the week of a date: date</li> <li>extraction (day, week, month, year, hours, ...): date</li> <li>add a period to a date: date, period (days, months, years, ...)</li> </ul>"},{"location":"concepts/recipes/setters/#lists","title":"Lists","text":"<ul> <li>maximum quantity in a list: list of quantities</li> <li>minimum quantity in a list: list of quantities</li> <li>merge several lists: list of lists</li> <li>select elements (pick): list of values, start index, end index</li> </ul>"},{"location":"concepts/recipes/setters/#values","title":"Values","text":"<ul> <li>random number: minimum quantity (0), maximum quantity (1), number of decimals (2)</li> <li>pi: number of decimals (15)</li> <li>current date: return variation (\"timestamp\")</li> </ul>"},{"location":"concepts/storage/","title":"Storage","text":"<p>Storage allows the storage of data in different textual and binary forms.</p>"},{"location":"concepts/storage/collections/","title":"Collections","text":"<p>A Collection allows the storage of data described with Fields.</p> <p>Fields are defined by a Format.</p> <p>A Collection contains Items.</p>","tags":["cloud","alpha"]},{"location":"concepts/storage/containers/","title":"Containers","text":"<p>Containers describe how an image works for use in a Deployment.</p> <p>Are described:</p> <ul> <li>the necessary operating procedures</li> <li>the available environment variables</li> <li>the directories requiring persistence</li> <li>the available ports</li> <li>recommended memory and processor resources</li> </ul>","tags":["cloud","stable"]},{"location":"concepts/storage/logs/","title":"Logs","text":"<p>Logs allows to store output streams of programs in order to keep traces of their execution.</p> <p>They can for example be used with a Deployment to keep its logs.</p>","tags":["cloud","alpha"]},{"location":"concepts/storage/metrics/","title":"Metrics","text":"<p>Metrics are numbers stored over time to generate chronological statistics.</p>","tags":["cloud","alpha"]},{"location":"concepts/storage/repositories/","title":"Repositories","text":"<p>Repositories allow you to store source code with Git versioning.</p>","tags":["cloud","stable"]},{"location":"concepts/storage/values/","title":"Values","text":"<p>Values are raw data stored in Recipes that correspond to a specific Format.</p>","tags":["beta"]},{"location":"concepts/storage/volumes/","title":"Volumes","text":"<p>Volumes allow the storage of static files (images, videos...) at the level of an Owner, it will then be possible to use its Files in Recipes.</p> <p>To create a Volume, you must indicate an amount in Gigabytes (Go) to reserve.</p> <p>The backups of Volumes is configurable to increase or decrease its regularity.</p>","tags":["cloud","alpha"]},{"location":"concepts/validations/","title":"Validations","text":"<p>Validations allow the verification of data.</p>"},{"location":"concepts/validations/issues/","title":"Issues","text":"<p>Issues describe potential errors usable in Setters, Functions or Types.</p>","tags":["alpha"]},{"location":"concepts/validations/syntaxes/","title":"Syntaxes","text":"<p>Syntaxes allow to perform a decomposition of a textual data via the use of Formats.</p>","tags":["beta"]},{"location":"concepts/validations/types/","title":"Types","text":"<p>Types allow to register and reuse Formats split into Variations.</p> <p>By using a Type in another Recipe, it is possible to test the Format of a data with Setters and to trigger an Issue in case of error.</p>","tags":["alpha"]}]}